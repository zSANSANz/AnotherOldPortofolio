/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gapabrikroti.view;

import gapabrikroti.dao.CrossOverGenerationDAO;
import gapabrikroti.dao.EvaluasiGenerationDAO;
import gapabrikroti.dao.MutasiGenerationDAO;
import gapabrikroti.dao.RouleteWheelGenerationDAO;
import gapabrikroti.error.CrossOverGenerationException;
import gapabrikroti.error.EvaluasiGenerationException;
import gapabrikroti.error.MutasiGenerationException;
import gapabrikroti.error.RouleteWheelGenerationException;
import gapabrikroti.model.EvaluasiGeneration;
import gapabrikroti.service.CrossOverGenerationServiceTable;
import gapabrikroti.service.EvaluasiGenerationServiceTable;
import gapabrikroti.service.MutasiGenerationServiceTable;
import gapabrikroti.service.RouleteWheelGenerationServiceTable;
import gapabrikroti.utility.databaseUtility;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Path2D;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MapPolygonImpl;
import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;

/**
 *
 * @author cvgs
 */
public class HasilIterasiView extends javax.swing.JFrame implements ListSelectionListener {

    private EvaluasiGenerationServiceTable evaluasiGenerationServiceTable;
    private RouleteWheelGenerationServiceTable rouleteGenerationServiceTable;
    private MutasiGenerationServiceTable mutasiGenerationServiceTable;
    private CrossOverGenerationServiceTable crossOverGenerationServiceTable;

    public HasilIterasiView() throws EvaluasiGenerationException, RouleteWheelGenerationException, CrossOverGenerationException, MutasiGenerationException, SQLException {
        evaluasiGenerationServiceTable = new EvaluasiGenerationServiceTable();
        rouleteGenerationServiceTable = new RouleteWheelGenerationServiceTable();
        crossOverGenerationServiceTable = new CrossOverGenerationServiceTable();
        mutasiGenerationServiceTable = new MutasiGenerationServiceTable();

        initComponents();

        tblEvaluasi.getSelectionModel().addListSelectionListener(this);
        tblEvaluasi.setModel(evaluasiGenerationServiceTable);
        loadTblEvaluasiGeneration();

        tblRouleteWheel.getSelectionModel().addListSelectionListener(this);
        tblRouleteWheel.setModel(rouleteGenerationServiceTable);
        loadTblRouleteWheelGeneration();

        tblCrossOver.getSelectionModel().addListSelectionListener(this);
        tblCrossOver.setModel(crossOverGenerationServiceTable);
        loadTblCrossOverGeneration();

        tblMutasi.getSelectionModel().addListSelectionListener(this);
        tblMutasi.setModel(mutasiGenerationServiceTable);
        loadTblMutasiGeneration();

    }

    public JTable getTblCrossOver() {
        return tblCrossOver;
    }

    public JTable getTblEvaluasi() {
        return tblEvaluasi;
    }

    public JTable getTblMutasi() {
        return tblMutasi;
    }

    public JTable getTblRouleteWheel() {
        return tblRouleteWheel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        tblEvaluasi = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblRouleteWheel = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblCrossOver = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblMutasi = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblEvaluasi.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblEvaluasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblEvaluasi.setRowHeight(22);
        jScrollPane4.setViewportView(tblEvaluasi);

        tblRouleteWheel.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblRouleteWheel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRouleteWheel.setRowHeight(22);
        jScrollPane5.setViewportView(tblRouleteWheel);

        tblCrossOver.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(tblCrossOver);

        tblMutasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tblMutasi);

        jLabel22.setText("Evaluasi");

        jLabel21.setText("Roulete Wheel");

        jLabel23.setText("Cross Over");

        jLabel24.setText("Mutasi");

        jButton1.setText("Lihat Grafik");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Rekomendasi Koordinat dgn Peta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 14, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addGap(433, 433, 433))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(410, 410, 410))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addGap(416, 416, 416))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addGap(437, 437, 437))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(347, 347, 347)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(jButton3)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int generasi, noChromosome;
        double fitness;
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
        try {
            EvaluasiGenerationDAO evaluasiGenerationDAO;
            evaluasiGenerationDAO = databaseUtility.getEvaluasiGenerationDAO();
            List<EvaluasiGeneration> evaluasiGeneration = evaluasiGenerationDAO.getAllEvaluasiGeneration();
            //membangkitkan evaluasi
            for (EvaluasiGeneration itemEvaluasi : evaluasiGeneration) {
                noChromosome = itemEvaluasi.getNoEvaluasi();
                fitness = itemEvaluasi.getFitness();
                generasi = itemEvaluasi.getGenerationNo();
                
                String Generasi = String.valueOf(generasi);
                String Fitness = String.valueOf(fitness);
                String NoChromosome = String.valueOf(noChromosome);
                
                dataSet.addValue(fitness, Generasi, NoChromosome);
                
            }
            
            JFreeChart chartbar = ChartFactory.createBarChart3D("Grafik Fitness", "Chromosome", "Fitness", dataSet, PlotOrientation.VERTICAL, true, true, true);
            ChartFrame frame = new ChartFrame("Grafik Fitness per Chromosome", chartbar);
            frame.setVisible(true);
            frame.setSize(600, 400);
            frame.setLocationRelativeTo(null);
            frame.setTitle("Grafik Fitness");
        } catch (SQLException ex) {
            Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EvaluasiGenerationException ex) {
            Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            createAndShowUI();
        } catch (SQLException ex) {
            Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EvaluasiGenerationException ex) {
            Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HasilIterasiView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HasilIterasiView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HasilIterasiView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HasilIterasiView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new HasilIterasiView().setVisible(true);
                } catch (EvaluasiGenerationException ex) {
                    Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RouleteWheelGenerationException ex) {
                    Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (CrossOverGenerationException ex) {
                    Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MutasiGenerationException ex) {
                    Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(HasilIterasiView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable tblCrossOver;
    private javax.swing.JTable tblEvaluasi;
    private javax.swing.JTable tblMutasi;
    private javax.swing.JTable tblRouleteWheel;
    // End of variables declaration//GEN-END:variables

    private void loadTblEvaluasiGeneration() throws SQLException, EvaluasiGenerationException {
        EvaluasiGenerationDAO evaluasiGenerationDAO = databaseUtility.getEvaluasiGenerationDAO();
        evaluasiGenerationServiceTable.setList(evaluasiGenerationDAO.getAllEvaluasiGeneration());

    }

    private void loadTblRouleteWheelGeneration() throws SQLException, RouleteWheelGenerationException {
        RouleteWheelGenerationDAO rouleteWheelGenerationDAO = databaseUtility.getRouleteWheelGenerationDAO();
        rouleteGenerationServiceTable.setList(rouleteWheelGenerationDAO.getAllRouleteWheelGeneration());

    }

    private void loadTblCrossOverGeneration() throws SQLException, CrossOverGenerationException {
        CrossOverGenerationDAO crossOverGenerationDAO = databaseUtility.getCrossOverGenerationDAO();
        crossOverGenerationServiceTable.setList(crossOverGenerationDAO.getAllCrossOverGeneration());

    }

    private void loadTblMutasiGeneration() throws SQLException, MutasiGenerationException {
        MutasiGenerationDAO mutasGenerationiDAO = databaseUtility.getMutasiGenerationDAO();
        mutasiGenerationServiceTable.setList(mutasGenerationiDAO.getAllMutasiGeneration());

    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
    public static class MapPolyLine extends MapPolygonImpl {

        public MapPolyLine(List<? extends ICoordinate> points) {
            super(null, null, points);
        }

        @Override
        public void paint(Graphics g, List<Point> points) {
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.setColor(getColor());
            g2d.setStroke(getStroke());
            Path2D path = buildPath(points);
            g2d.draw(path);
            g2d.dispose();
        }

        private Path2D buildPath(List<Point> points) {
            Path2D path = new Path2D.Double();
            if (points != null && points.size() > 0) {
                Point firstPoint = points.get(0);
                path.moveTo(firstPoint.getX(), firstPoint.getY());
                for (Point p : points) {
                    path.lineTo(p.getX(), p.getY());
                }
            }
            return path;
        }
    }

    private static void createAndShowUI() throws SQLException, EvaluasiGenerationException {
        JFrame frame = new JFrame("Demo");
        JMapViewer viewer = new JMapViewer();

        int x, y;

        EvaluasiGenerationDAO evaluasiGenerationDAO;
        evaluasiGenerationDAO = databaseUtility.getEvaluasiGenerationDAO();
        List<EvaluasiGeneration> evaluasiGeneration = evaluasiGenerationDAO.getAllEvaluasiGenerationByProbabilitas();
        List<Coordinate> coordinates = new ArrayList<Coordinate>();
        //membangkitkan evaluasi
        for (EvaluasiGeneration itemEvaluasi : evaluasiGeneration) {
            x = (int) itemEvaluasi.getEvaluasiX();
            y = (int) itemEvaluasi.getEvaluasiY();
            coordinates.add(new Coordinate(x - 25, y + 100));

        }

        MapPolyLine polyLine = new MapPolyLine(coordinates);
        viewer.addMapPolygon(polyLine);

        frame.add(viewer);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationByPlatform(true);
        frame.pack();
        frame.setVisible(true);
        
    }
    
}
