/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package svmradikalmetode;

import svmradikalmetode.utility.jdbc;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andri
 */
public class Pelatihan extends javax.swing.JPanel {

    private static DefaultTableModel tblDokumen;
    private static DefaultTableModel tblNormalisasi;
    private static DefaultTableModel tblBobot;
    private static DefaultTableModel tblAcak;
    
    private static DefaultTableModel tblKernel;
    private static DefaultTableModel tblHessian;
    
    private static DefaultTableModel tblLangkahA;
    private static DefaultTableModel tblLangkahB;
    private static DefaultTableModel tblLangkahB1;
    private static DefaultTableModel tblLangkahC;

    /**
     * Creates new form Pengujian
     */
    public Pelatihan() {
        initComponents();

        try {
            termFrekuensi();
            outputShow();
            acakShow();
        } catch (SQLException ex) {
            Logger.getLogger(Pelatihan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        TblMatriksHessian = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        TblKernel = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        TblDokumen = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        TblNormalisasi = new javax.swing.JTable();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        TblLangkahA = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane16 = new javax.swing.JScrollPane();
        TblLangkahB = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        TblLangkahB1 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        TblLangkahC = new javax.swing.JTable();

        jInternalFrame1.setVisible(true);

        TblMatriksHessian.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TblMatriksHessian);

        TblKernel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(TblKernel);

        jTextField2.setText(" ");

        jLabel2.setText("Literasi :");

        jButton1.setText("Proses Pelatihan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Kernel");

        jLabel5.setText("Matrix Hessian");

        jLabel9.setText("TERM FREKUENSI");

        TblDokumen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(TblDokumen);

        jLabel10.setText("NORMALISASI TERM FREKUENSI");

        TblNormalisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(TblNormalisasi);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1039, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );

        jLabel11.setText("Iterasi 0");

        jLabel12.setText("LANGKAH A");

        TblLangkahA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(TblLangkahA);

        jLabel13.setText("LANGKAH B");

        TblLangkahB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane16.setViewportView(TblLangkahB);

        TblLangkahB1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane17.setViewportView(TblLangkahB1);

        jLabel14.setText("LANGKAH C");

        TblLangkahC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane18.setViewportView(TblLangkahC);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(444, 444, 444)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addGap(435, 435, 435))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 1450, Short.MAX_VALUE)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1450, Short.MAX_VALUE)
                    .addComponent(jScrollPane16)
                    .addComponent(jScrollPane17)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(154, 154, 154))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152))
                    .addComponent(jDesktopPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(339, 339, 339)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane9)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(193, 193, 193)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(334, 334, 334)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(640, 640, 640)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(0, 573, Short.MAX_VALUE))
                        .addComponent(jScrollPane14))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(94, 94, 94)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(472, 472, 472)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(273, 273, 273)
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(167, 167, 167)
                    .addComponent(jLabel10)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(517, Short.MAX_VALUE)))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1048, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 968, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            //
            //        jPanel1.removeAll();
            //        AcakBobot ab = new AcakBobot();
            //        ab.setBounds(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
            //        jPanel1.add(ab);
            //        ab.setVisible(true);
            jDesktopPane1.removeAll();
            Iterasi ab = new Iterasi();
            ab.setBounds(0, 0, jDesktopPane1.getWidth(), jDesktopPane1.getHeight());
            jDesktopPane1.add(ab);
            ab.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Pelatihan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TblDokumen;
    private javax.swing.JTable TblKernel;
    private javax.swing.JTable TblLangkahA;
    private javax.swing.JTable TblLangkahB;
    private javax.swing.JTable TblLangkahB1;
    private javax.swing.JTable TblLangkahC;
    private javax.swing.JTable TblMatriksHessian;
    private javax.swing.JTable TblNormalisasi;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void bobotTableConfig() {
        tblBobot = new DefaultTableModel();
        TblKernel.setModel(tblBobot);
        tblBobot.addColumn("i");
        tblBobot.addColumn("j1");
        tblBobot.addColumn("j2");
        tblBobot.addColumn("j3");
        tblBobot.addColumn("j4");
        tblBobot.addColumn("j5");
        tblBobot.addColumn("j6");
    }

    private void bobotTableShow() throws SQLException {
            //=($C$5*C5+$D$5*D5+$E$5*E5+$F$5*F5+$G$5*G5+$H$5*H5)^2
        //menampilakan normalisasi
        String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_normalisasi, tb_filtering WHERE tb_normalisasi.id = tb_filtering.id_filtering ";
        Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

        //clear tb_kernel
        Statement st = (Statement) jdbc.getConnection().createStatement();
        String sqlTruncateKernel = "TRUNCATE tb_kernel_polinomial_degree";
        st.executeUpdate(sqlTruncateKernel);

        while (rsNormalisasiHasil.next()) {
            Object[] oNormalisasiHasil1 = new Object[8];
            oNormalisasiHasil1[0] = rsNormalisasiHasil.getString("id");
            oNormalisasiHasil1[1] = rsNormalisasiHasil.getString("deskripsi_filtering");
            oNormalisasiHasil1[2] = rsNormalisasiHasil.getString("kbplus");
            oNormalisasiHasil1[3] = rsNormalisasiHasil.getString("kbmin");
            oNormalisasiHasil1[4] = rsNormalisasiHasil.getString("ksplus");
            oNormalisasiHasil1[5] = rsNormalisasiHasil.getString("ksmin");
            oNormalisasiHasil1[6] = rsNormalisasiHasil.getString("kkplus");
            oNormalisasiHasil1[7] = rsNormalisasiHasil.getString("kkmin");
            //System.out.print(oNormalisasiHasil1[2] + " ------------------- ");

            String sqlSelectAllNormalisasiHasil2 = "SELECT * FROM tb_normalisasi, tb_filtering WHERE tb_normalisasi.id = tb_filtering.id_filtering ";
            Statement stNormalisasiHasil2 = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsNormalisasiHasil2 = stNormalisasiHasil2.executeQuery(sqlSelectAllNormalisasiHasil2);
            while (rsNormalisasiHasil2.next()) {
                Object[] oNormalisasiHasil2 = new Object[8];
                oNormalisasiHasil2[0] = rsNormalisasiHasil2.getString("id");
                oNormalisasiHasil2[1] = rsNormalisasiHasil2.getString("deskripsi_filtering");
                oNormalisasiHasil2[2] = Math.pow((Float.parseFloat(rsNormalisasiHasil2.getString("kbplus"))) * (Float.parseFloat(rsNormalisasiHasil.getString("kbplus")))
                        + (Float.parseFloat(rsNormalisasiHasil2.getString("kbmin"))) * (Float.parseFloat(rsNormalisasiHasil.getString("kbmin")))
                        + (Float.parseFloat(rsNormalisasiHasil2.getString("ksplus"))) * (Float.parseFloat(rsNormalisasiHasil.getString("ksplus")))
                        + (Float.parseFloat(rsNormalisasiHasil2.getString("ksmin"))) * (Float.parseFloat(rsNormalisasiHasil.getString("ksmin")))
                        + (Float.parseFloat(rsNormalisasiHasil2.getString("kkplus"))) * (Float.parseFloat(rsNormalisasiHasil.getString("kkplus")))
                        + (Float.parseFloat(rsNormalisasiHasil2.getString("kkmin"))) * (Float.parseFloat(rsNormalisasiHasil.getString("kkmin"))), 2);
                oNormalisasiHasil2[3] = rsNormalisasiHasil2.getString("kbmin");
                oNormalisasiHasil2[4] = rsNormalisasiHasil2.getString("ksplus");
                oNormalisasiHasil2[5] = rsNormalisasiHasil2.getString("ksmin");
                oNormalisasiHasil2[6] = rsNormalisasiHasil2.getString("kkplus");
                oNormalisasiHasil2[7] = rsNormalisasiHasil2.getString("kkmin");
                //System.out.println(oNormalisasiHasil2[0] + " " + oNormalisasiHasil2[2]);

                String sqlInsertKernel = "INSERT INTO tb_kernel_polinomial_degree VALUES (null,'" + rsNormalisasiHasil.getString("id") + "','" + oNormalisasiHasil2[0] + "','" + oNormalisasiHasil2[2] + "')";
                st.executeUpdate(sqlInsertKernel);
            }

        }

        String sqlSelectAllKernel = "SELECT * FROM tb_kernel_polinomial_degree";
        Statement stSelectKernel = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsSelectKernel = stSelectKernel.executeQuery(sqlSelectAllKernel);

        String sqlClearColumnKernel = "DROP TABLE tb_kernel";
        Statement stClearColumnKernel = (Statement) jdbc.getConnection().createStatement();
        stClearColumnKernel.executeUpdate(sqlClearColumnKernel);

        String sqlClearColumnKernel1 = "CREATE TABLE tb_kernel (\n"
                + "   ID   INT              AUTO_INCREMENT,\n"
                + "     \n"
                + "   PRIMARY KEY (ID)\n"
                + ");";
        Statement stClearColumnKernel1 = (Statement) jdbc.getConnection().createStatement();
        stClearColumnKernel1.executeUpdate(sqlClearColumnKernel1);

        String sqlCountKernel = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel = stCountKernel.executeQuery(sqlCountKernel);

        //System.out.println(sqlCountKernel);
        while (rsCountKernel.next()) {
            //System.out.println(rsCountKernel.getString("max"));
            for (int c = 1; c <= Integer.parseInt(rsCountKernel.getString("max").toString()); c++) {
                String sqlInsertKernel = "INSERT INTO tb_kernel VALUES(null)";
                //System.out.println(sqlInsertKernel);
                st.executeUpdate(sqlInsertKernel);
            }

            for (int c = 1; c <= Integer.parseInt(rsCountKernel.getString("max").toString()); c++) {
                String sqlCreateColumnKernel1 = "ALTER TABLE `tb_kernel` ADD `" + c + "` FLOAT NOT NULL ;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernel1 = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernel1.executeUpdate(sqlCreateColumnKernel1);
            }
        }

        int a = 0;
        while (rsSelectKernel.next()) {
            a = a + 1;

            Object[] oSelectKernel = new Object[8];
            oSelectKernel[0] = rsSelectKernel.getString("id");
            oSelectKernel[1] = rsSelectKernel.getString("id_doc1");
            oSelectKernel[2] = rsSelectKernel.getString("id_doc2");
            oSelectKernel[3] = rsSelectKernel.getString("nilai");
            //System.out.println(oSelectKernel[0] + " " + oSelectKernel[1] + " " + oSelectKernel[2] + " " + oSelectKernel[3]);

            String sqlUpdateKernel = "UPDATE tb_kernel SET `" + oSelectKernel[2] + "` = '" + oSelectKernel[3] + "' WHERE id='" + oSelectKernel[1] + "'";
            //System.out.println(sqlUpdateKernel);
            st.executeUpdate(sqlUpdateKernel);

        }

    }

    private void acakShow() throws SQLException {
        Statement st = (Statement) jdbc.getConnection().createStatement();

        //mengosongkan table tb_langkah_nol_a_perhitungan terlebih dahulu
        String sqlTruncateNolPerhitungan = "TRUNCATE tb_langkah_nol_a_perhitungan";
        st.executeUpdate(sqlTruncateNolPerhitungan);

        float hasilLangkahNol;

        //memanggil nilai dari Y yang berada di parameter
        String sqlSelectParameterY = "SELECT alpha_i FROM tb_parameter WHERE ID=1";
        Statement stSelectParameterY = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsSelectParameterY = stSelectParameterY.executeQuery(sqlSelectParameterY);
        while (rsSelectParameterY.next()) {
            String sqlKernelPerhitungan = "SELECT * FROM tb_matrix_hessian_perhitungan";
            Statement stKernelPerhitungan = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsKernelPerhitungan = stKernelPerhitungan.executeQuery(sqlKernelPerhitungan);
            while (rsKernelPerhitungan.next()) {
                //=$I$5*I5*(B23+($B$13^2))
                hasilLangkahNol = (float) (Float.parseFloat(rsKernelPerhitungan.getString("nilai"))
                        * (Float.parseFloat(rsSelectParameterY.getString("alpha_i"))));
                //System.out.println(hasilLangkahNol);

                String sqlInsertHessianMatrixPerhitungan = "INSERT INTO tb_langkah_nol_a_perhitungan VALUES (null,'" + rsKernelPerhitungan.getString("id_doc_1") + "','" + rsKernelPerhitungan.getString("id_doc_2") + "','" + hasilLangkahNol + "')";
                st.executeUpdate(sqlInsertHessianMatrixPerhitungan);
            }
        }

        //mulai metode untuk perhitungan matrix hessian
        //hapus dulu tabel matrix hessian
        String sqlClearColumnLangkahNolA = "DROP TABLE tb_langkah_nol_a";
        Statement stClearColumnLangkahNolA = (Statement) jdbc.getConnection().createStatement();
        stClearColumnLangkahNolA.executeUpdate(sqlClearColumnLangkahNolA);

        String sqlCreateLangkahNolA = "CREATE TABLE tb_langkah_nol_a (\n"
                + "   ID   INT              AUTO_INCREMENT,\n"
                + "     \n"
                + "   PRIMARY KEY (ID)\n"
                + ");";
        Statement stCreateLangkahNolA = (Statement) jdbc.getConnection().createStatement();
        stCreateLangkahNolA.executeUpdate(sqlCreateLangkahNolA);

        String sqlCountKernel3 = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel3 = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel3 = stCountKernel3.executeQuery(sqlCountKernel3);

        //System.out.println(sqlCountKernel);
        while (rsCountKernel3.next()) {
            //System.out.println(rsCountKernel.getString("max"));
            for (int cc = 1; cc <= Integer.parseInt(rsCountKernel3.getString("max").toString()); cc++) {
                String sqlInsertKernel = "INSERT INTO tb_langkah_nol_a VALUES(null)";
                //System.out.println(sqlInsertKernel);
                stCreateLangkahNolA.executeUpdate(sqlInsertKernel);
            }

            for (int cc = 1; cc <= Integer.parseInt(rsCountKernel3.getString("max").toString()); cc++) {
                String sqlCreateColumnKernel1 = "ALTER TABLE tb_langkah_nol_a ADD `" + cc + "` FLOAT NOT NULL ;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernel1 = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernel1.executeUpdate(sqlCreateColumnKernel1);
            }
        }
        //telah terbentuk tabel lankah A iterasi 0 dengan jumlah sesuai dengan tabel kernel
        //memasukkan nilai ke dalam tabel yang akan di tampilkan
        String sqlMatrixHessian = "SELECT * FROM tb_langkah_nol_a_perhitungan";
        Statement stMatrixHessian = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsMatrixHessian = stMatrixHessian.executeQuery(sqlMatrixHessian);
        int a = 0;
        while (rsMatrixHessian.next()) {
            a = a + 1;

            Object[] oSelectKernel = new Object[8];
            oSelectKernel[0] = rsMatrixHessian.getString("id");
            oSelectKernel[1] = rsMatrixHessian.getString("id_doc_1");
            oSelectKernel[2] = rsMatrixHessian.getString("id_doc_2");
            oSelectKernel[3] = rsMatrixHessian.getString("nilai");
            //System.out.println(oSelectKernel[0] + " " + oSelectKernel[1] + " " + oSelectKernel[2] + " " + oSelectKernel[3]);

            String sqlUpdateKernel = "UPDATE tb_langkah_nol_a SET `" + oSelectKernel[2] + "` = '" + oSelectKernel[3] + "' WHERE id='" + oSelectKernel[1] + "'";
            //System.out.println(sqlUpdateKernel);
            st.executeUpdate(sqlUpdateKernel);

        }

        //menampilkan hasil perhitungan ke dalam tabel
        int c = 0;

        tblLangkahA = new DefaultTableModel();
        TblLangkahA.setModel(tblLangkahA);
        tblLangkahA.addColumn("Id");
        tblLangkahA.addColumn("kalimat yang di eksekusi");

        String sqlCountKernel = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel = stCountKernel.executeQuery(sqlCountKernel);

        while (rsCountKernel.next()) {
            for (c = 1; c <= Integer.parseInt(rsCountKernel.getString("max").toString()); c++) {
                tblLangkahA.addColumn(c);
            }
        }

        //kernel tampilkan tabel
        String sqlSelectAllJumlahKata = "SELECT * FROM tb_langkah_nol_a, tb_filtering WHERE tb_langkah_nol_a.id = tb_filtering.id_filtering ";
        Statement stJumlahKata = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKata = stJumlahKata.executeQuery(sqlSelectAllJumlahKata);
        while (rsJumlahKata.next()) {
            Object[] oJumlahKata = new Object[c + 1];
            oJumlahKata[0] = rsJumlahKata.getString("id_filtering");
            oJumlahKata[1] = rsJumlahKata.getString("deskripsi_filtering");

            String sqlCountKernel1 = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
            Statement stCountKernel1 = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsCountKernel1 = stCountKernel1.executeQuery(sqlCountKernel1);

            while (rsCountKernel1.next()) {
                for (int d = 2; d <= Integer.parseInt(rsCountKernel1.getString("max").toString()) + 1; d++) {
                    oJumlahKata[d] = rsJumlahKata.getString(d);
                }
            }
            tblLangkahA.addRow(oJumlahKata);
        }

        //mulai metode untuk perhitungan matrix hessian
        //hapus dulu tabel matrix hessian
        String sqlClearColumnLangkahNolB = "DROP TABLE tb_langkah_nol_b";
        Statement stClearColumnLangkahNolB = (Statement) jdbc.getConnection().createStatement();
        stClearColumnLangkahNolB.executeUpdate(sqlClearColumnLangkahNolB);

        String sqlCreateLangkahNolB = "CREATE TABLE tb_langkah_nol_b (\n"
                + "   ID   INT              AUTO_INCREMENT,\n"
                + "     \n"
                + "   PRIMARY KEY (ID)\n"
                + ");";
        Statement stCreateLangkahNolB = (Statement) jdbc.getConnection().createStatement();
        stCreateLangkahNolB.executeUpdate(sqlCreateLangkahNolB);

        String sqlCountKernel31 = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel31 = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel31 = stCountKernel31.executeQuery(sqlCountKernel31);

        String sqlInsertKernelB = "INSERT INTO tb_langkah_nol_b VALUES(null)";
        //System.out.println(sqlInsertKernel);
        stCreateLangkahNolB.executeUpdate(sqlInsertKernelB);

        float hasilLangkahB;
        float yParameter, sum, alphaI, cParameter;

        while (rsCountKernel31.next()) {
            for (int jumlah = 1; jumlah <= Integer.parseInt(rsCountKernel31.getString("max").toString()); jumlah++) {
                String sqlCreateColumnKernel11 = "ALTER TABLE tb_langkah_nol_b ADD `" + jumlah + "` FLOAT NOT NULL ;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernel11 = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernel11.executeUpdate(sqlCreateColumnKernel11);
            }

            for (int jumlah = 1; jumlah <= Integer.parseInt(rsCountKernel31.getString("max")); jumlah++) {
                //mencari nilai ei dengan menjumlahkan nilai langkah a setiap kolom
                String sqlSumEi = "SELECT SUM(`" + jumlah + "`) as Ei FROM tb_langkah_nol_a";
                Statement stSumEi = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsSumEi = stSumEi.executeQuery(sqlSumEi);
                while (rsSumEi.next()) {
                    //mengambil nilai y, alpha i, dan c dari parameter
                    String sqlAmbilParameter = "SELECT * FROM tb_parameter";
                    Statement stAmbilParameter = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsAmbilParameter = stAmbilParameter.executeQuery(sqlAmbilParameter);
                    while (rsAmbilParameter.next()) {
                        //=MIN(MAX(y*(1-sum);-alphai);c-alphai)
                        yParameter = Float.parseFloat(rsAmbilParameter.getString("y"));
                        sum = Float.parseFloat(rsSumEi.getString("ei"));
                        alphaI = Float.parseFloat(rsAmbilParameter.getString("alpha_i"));
                        cParameter = Float.parseFloat(rsAmbilParameter.getString("c"));

//                        System.out.println(yParameter);
//                        System.out.println(sum);
//                        System.out.println(alphaI);
//                        System.out.println(cParameter);
                        hasilLangkahB = Math.min(Math.max(yParameter * (1 - sum), -alphaI), cParameter - alphaI);
                        //System.out.println(hasilLangkahB);

                        String sqlUpdateKernel12 = "UPDATE tb_langkah_nol_b SET `" + jumlah + "` = '" + hasilLangkahB + "' WHERE id='1'";
                        //System.out.println(sqlUpdateKernel);
                        st.executeUpdate(sqlUpdateKernel12);

                    }
                }
            }
        }

        //menampilkan pada tabel  langkah b ke 1 iterasi 0
        tblLangkahB = new DefaultTableModel();
        TblLangkahB.setModel(tblLangkahB);

        int ca = 0;

        String sqlCountKernelca = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernelca = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernelca = stCountKernelca.executeQuery(sqlCountKernelca);

        while (rsCountKernelca.next()) {
            for (ca = 1; ca <= Integer.parseInt(rsCountKernelca.getString("max").toString()); ca++) {
                tblLangkahB.addColumn(ca);
            }
        }

        //memasukkan data pada tabel  langkah b ke 1 iterasi 0
        String sqlSelectAllJumlahKataca = "SELECT * FROM tb_langkah_nol_b";
        Statement stJumlahKataca = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKataca = stJumlahKataca.executeQuery(sqlSelectAllJumlahKataca);
        while (rsJumlahKataca.next()) {
            Object[] oJumlahKata = new Object[ca + 2];
            String sqlCountKernel1cab = "SELECT MAX(id) AS max FROM tb_langkah_nol_a";
            Statement stCountKernel1cab = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsCountKernel1cab = stCountKernel1cab.executeQuery(sqlCountKernel1cab);
            int d = 2;
            while (rsCountKernel1cab.next()) {
                while (d <= Integer.parseInt(rsCountKernel1cab.getString("max").toString()) + 1) {
                    oJumlahKata[d - 2] = rsJumlahKataca.getString(d);
                    d++;
                }
            }
            tblLangkahB.addRow(oJumlahKata);
        }

        //membuat tabel tb_langkah_nol_b_2
        String sqlClearColumnLangkahNolB2 = "DROP TABLE tb_langkah_nol_b_1";
        Statement stClearColumnLangkahNolB2 = (Statement) jdbc.getConnection().createStatement();
        stClearColumnLangkahNolB2.executeUpdate(sqlClearColumnLangkahNolB2);

        String sqlCreateLangkahNolB2 = "CREATE TABLE tb_langkah_nol_b_1 (\n"
                + "   ID   INT              AUTO_INCREMENT,\n"
                + "     \n"
                + "   PRIMARY KEY (ID)\n"
                + ");";
        Statement stCreateLangkahNolB2 = (Statement) jdbc.getConnection().createStatement();
        stCreateLangkahNolB2.executeUpdate(sqlCreateLangkahNolB2);

        String sqlCountKernel312 = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel312 = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel312 = stCountKernel312.executeQuery(sqlCountKernel312);

        String sqlInsertKernelB2 = "INSERT INTO tb_langkah_nol_b_1 VALUES(null)";
        //System.out.println(sqlInsertKernel);
        stCreateLangkahNolB.executeUpdate(sqlInsertKernelB2);

        while (rsCountKernel312.next()) {
            for (int jumlah = 1; jumlah <= Integer.parseInt(rsCountKernel312.getString("max").toString()); jumlah++) {
                String sqlCreateColumnKernel112 = "ALTER TABLE tb_langkah_nol_b_1 ADD `" + jumlah + "` FLOAT NOT NULL ;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernel112 = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernel112.executeUpdate(sqlCreateColumnKernel112);
            }
        }

        //menampilkan pada tabel  langkah b ke 2 iterasi 0
        tblLangkahB1 = new DefaultTableModel();
        TblLangkahB1.setModel(tblLangkahB1);

        int cd = 0;

        String sqlCountKernelcd = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernelcd = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernelcd = stCountKernelcd.executeQuery(sqlCountKernelcd);

        while (rsCountKernelcd.next()) {
            for (cd = 1; cd <= Integer.parseInt(rsCountKernelcd.getString("max").toString()); cd++) {
                tblLangkahB1.addColumn(cd);
            }
        }

        //memasukkan pada tabel  langkah b ke 2 iterasi 0
        String sqlSelectAllJumlahKatacd = "SELECT alpha_i FROM `tb_parameter` WHERE id = 1";
        Statement stJumlahKatacd = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKatacd = stJumlahKatacd.executeQuery(sqlSelectAllJumlahKatacd);
        while (rsJumlahKatacd.next()) {
            Object[] oJumlahKatad = new Object[cd + 2];

            String sqlCountKernel1cabd = "SELECT MAX(id) AS max FROM tb_langkah_nol_a";
            Statement stCountKernel1cabd = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsCountKernel1cabd = stCountKernel1cabd.executeQuery(sqlCountKernel1cabd);
            int d = 1;
            while (rsCountKernel1cabd.next()) {
                while (d <= Integer.parseInt(rsCountKernel1cabd.getString("max").toString())) {
                    oJumlahKatad[d - 1] = rsJumlahKatacd.getString("alpha_i");

                    String sqlUpdateKernel122 = "UPDATE tb_langkah_nol_b_1 SET `" + d + "` = '" + oJumlahKatad[d - 1] + "' WHERE id='1'";
                    //System.out.println(sqlUpdateKernel122);
                    st.executeUpdate(sqlUpdateKernel122);

                    d++;
                }
                tblLangkahB1.addRow(oJumlahKatad);
            }
        }

        //membuat tabel tb_langkah_nol_c
        String sqlClearColumnLangkahNolc = "DROP TABLE tb_langkah_nol_c";
        Statement stClearColumnLangkahNolc = (Statement) jdbc.getConnection().createStatement();
        stClearColumnLangkahNolc.executeUpdate(sqlClearColumnLangkahNolc);

        String sqlClearColumnLangkahNolcIterasi = "DROP TABLE tb_langkah_nol_c_iterasi";
        Statement stClearColumnLangkahNolcIterasi = (Statement) jdbc.getConnection().createStatement();
        stClearColumnLangkahNolcIterasi.executeUpdate(sqlClearColumnLangkahNolcIterasi);

        String sqlCreateLangkahNolc = "CREATE TABLE tb_langkah_nol_c (\n"
                + "   ID   INT              AUTO_INCREMENT,\n"
                + "     \n"
                + "   PRIMARY KEY (ID)\n"
                + ");";
        Statement stCreateLangkahNolc = (Statement) jdbc.getConnection().createStatement();
        stCreateLangkahNolc.executeUpdate(sqlCreateLangkahNolc);

        String sqlCreateLangkahNolcIterasi = "CREATE TABLE tb_langkah_nol_c_iterasi ("
                + "ID INT AUTO_INCREMENT,"
                + " iterasi int,"
                + " PRIMARY KEY (ID))";
        Statement stCreateLangkahNolcIterasi = (Statement) jdbc.getConnection().createStatement();
        stCreateLangkahNolcIterasi.executeUpdate(sqlCreateLangkahNolcIterasi);

        String sqlCountKernelc = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernelc = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernelc = stCountKernelc.executeQuery(sqlCountKernelc);

        String sqlInsertKernelc = "INSERT INTO tb_langkah_nol_c VALUES(null)";
        //System.out.println(sqlInsertKernel);
        stCreateLangkahNolc.executeUpdate(sqlInsertKernelc);

        String sqlInsertKernelcIterasi = "INSERT INTO tb_langkah_nol_c_iterasi VALUES(null, 0)";
        //System.out.println(sqlInsertKernel);
        stCreateLangkahNolc.executeUpdate(sqlInsertKernelcIterasi);

        while (rsCountKernelc.next()) {
            for (int jumlah = 1; jumlah <= Integer.parseInt(rsCountKernelc.getString("max").toString()); jumlah++) {
                String sqlCreateColumnKernelc = "ALTER TABLE tb_langkah_nol_c ADD `" + jumlah + "` FLOAT NOT NULL ;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernelc = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernelc.executeUpdate(sqlCreateColumnKernelc);

                String sqlCreateColumnKernelcIterasi = "ALTER TABLE tb_langkah_nol_c_iterasi ADD `" + jumlah + "` FLOAT;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernelcIterasi = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernelcIterasi.executeUpdate(sqlCreateColumnKernelcIterasi);
            }
        }

        //menampilkan pada tabel  langkah c iterasi 0
        tblLangkahC = new DefaultTableModel();
        TblLangkahC.setModel(tblLangkahC);

        int cdcd = 0;

        String sqlCountKernelcdcd = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernelcdcd = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernelcdcd = stCountKernelcdcd.executeQuery(sqlCountKernelcdcd);

        while (rsCountKernelcdcd.next()) {
            for (cdcd = 1; cdcd <= Integer.parseInt(rsCountKernelcdcd.getString("max").toString()); cdcd++) {
                tblLangkahC.addColumn(cdcd);
            }
        }

        float langkah_c, b, b1;

        //memasukkan pada tabel  langkah c iterasi 0
        String sqlSelectAllJumlahKatacdcc = "SELECT * FROM tb_langkah_nol_b WHERE id = 1";
        Statement stJumlahKatacdcc = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKatacdcc = stJumlahKatacdcc.executeQuery(sqlSelectAllJumlahKatacdcc);
        while (rsJumlahKatacdcc.next()) {
            String sqlSelectAllJumlahKatacdccc = "SELECT * FROM tb_langkah_nol_b_1 WHERE id = 1";
            Statement stJumlahKatacdccc = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsJumlahKatacdccc = stJumlahKatacdccc.executeQuery(sqlSelectAllJumlahKatacdccc);
            while (rsJumlahKatacdccc.next()) {
                Object[] oJumlahKataadc = new Object[cd + 2];

                String sqlCountKernel1cabdc = "SELECT MAX(id) AS max FROM tb_langkah_nol_a";
                Statement stCountKernel1cabdc = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKernel1cabdc = stCountKernel1cabdc.executeQuery(sqlCountKernel1cabdc);
                int dad = 1;
                while (rsCountKernel1cabdc.next()) {
                    while (dad <= Integer.parseInt(rsCountKernel1cabdc.getString("max").toString())) {
                        b1 = Float.parseFloat(rsJumlahKatacdcc.getString(cdcd));
                        b = Float.parseFloat(rsJumlahKatacdccc.getString(cdcd));

                        langkah_c = b + b1;

                        oJumlahKataadc[dad - 1] = langkah_c;

                        String sqlUpdateKernel12c = "UPDATE tb_langkah_nol_c SET `" + dad + "` = '" + langkah_c + "' WHERE id='1'";
                        st.executeUpdate(sqlUpdateKernel12c);

                        String sqlUpdateKernel12cIterasi = "UPDATE tb_langkah_nol_c_iterasi SET `" + dad + "` = '" + langkah_c + "' WHERE id='1'";
                        st.executeUpdate(sqlUpdateKernel12cIterasi);
                        //System.out.println(sqlUpdateKernel12c);
                        dad++;
                    }
                    tblLangkahC.addRow(oJumlahKataadc);
                }
            }
        }
    }

    private void outputShow() throws SQLException {
        int c = 0;

        tblKernel = new DefaultTableModel();
        TblKernel.setModel(tblKernel);
        tblKernel.addColumn("Id");
        tblKernel.addColumn("kalimat yang di eksekusi");

        String sqlCountKernel = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel = stCountKernel.executeQuery(sqlCountKernel);

        while (rsCountKernel.next()) {
            for (c = 1; c <= Integer.parseInt(rsCountKernel.getString("max").toString()); c++) {
                tblKernel.addColumn(c);
            }
        }

        //kernel tampilkan tabel
        String sqlSelectAllJumlahKata = "SELECT * FROM tb_kernel, tb_filtering WHERE tb_kernel.id = tb_filtering.id_filtering ";
        Statement stJumlahKata = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKata = stJumlahKata.executeQuery(sqlSelectAllJumlahKata);
        while (rsJumlahKata.next()) {
            Object[] oJumlahKata = new Object[c + 1];
            oJumlahKata[0] = rsJumlahKata.getString("id_filtering");
            oJumlahKata[1] = rsJumlahKata.getString("deskripsi_filtering");

            String sqlCountKernel1 = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
            Statement stCountKernel1 = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsCountKernel1 = stCountKernel1.executeQuery(sqlCountKernel1);

            while (rsCountKernel1.next()) {
                for (int d = 2; d <= Integer.parseInt(rsCountKernel1.getString("max").toString()) + 1; d++) {
                    oJumlahKata[d] = rsJumlahKata.getString(d);
                }
            }

            tblKernel.addRow(oJumlahKata);

        }

        //mulai metode untuk perhitungan matrix hessian
        //hapus dulu tabel matrix hessian
        String sqlClearColumnHessian = "DROP TABLE tb_matrix_hessian";
        Statement stClearColumnHessian = (Statement) jdbc.getConnection().createStatement();
        stClearColumnHessian.executeUpdate(sqlClearColumnHessian);

        String sqlCreateHessian = "CREATE TABLE tb_matrix_hessian (\n"
                + "   ID   INT              AUTO_INCREMENT,\n"
                + "     \n"
                + "   PRIMARY KEY (ID)\n"
                + ");";
        Statement stCreateHessian = (Statement) jdbc.getConnection().createStatement();
        stCreateHessian.executeUpdate(sqlCreateHessian);

        String sqlCountKernel3 = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountKernel3 = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountKernel3 = stCountKernel3.executeQuery(sqlCountKernel3);

        //System.out.println(sqlCountKernel);
        while (rsCountKernel3.next()) {
            //System.out.println(rsCountKernel.getString("max"));
            for (int cc = 1; cc <= Integer.parseInt(rsCountKernel3.getString("max").toString()); cc++) {
                String sqlInsertKernel = "INSERT INTO tb_matrix_hessian VALUES(null)";
                //System.out.println(sqlInsertKernel);
                stCreateHessian.executeUpdate(sqlInsertKernel);
            }

            for (int cc = 1; cc <= Integer.parseInt(rsCountKernel3.getString("max").toString()); cc++) {
                String sqlCreateColumnKernel1 = "ALTER TABLE tb_matrix_hessian ADD `" + cc + "` FLOAT NOT NULL ;";
                //System.out.println(sqlCreateColumnKernel1);
                Statement stCreateColumnKernel1 = (Statement) jdbc.getConnection().createStatement();
                stCreateColumnKernel1.executeUpdate(sqlCreateColumnKernel1);
            }
        }
        //telah terbentuk tabel matrix hessian dengan jumlah sesuai dengan tabel kernel

        Statement st = (Statement) jdbc.getConnection().createStatement();
        String sqlTruncateHessianPehhitungan = "TRUNCATE tb_matrix_hessian_perhitungan";
        st.executeUpdate(sqlTruncateHessianPehhitungan);

        //mulai perhitungan Hessian Matrix
        //=$I$5*I5*(B23+($B$13^2))
        float hasilHessian = 0;

        //memanggil nilai dari Y yang berada di parameter
        String sqlSelectParameterY = "SELECT y FROM tb_parameter WHERE ID=1";
        Statement stSelectParameterY = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsSelectParameterY = stSelectParameterY.executeQuery(sqlSelectParameterY);
        while (rsSelectParameterY.next()) {

            String sqlKernelPerhitungan = "SELECT * FROM tb_kernel_polinomial_degree";
            Statement stKernelPerhitungan = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsKernelPerhitungan = stKernelPerhitungan.executeQuery(sqlKernelPerhitungan);
            while (rsKernelPerhitungan.next()) {
                String sqlPositifNegatif = "SELECT * FROM tb_filtering WHERE id_filtering='" + rsKernelPerhitungan.getString("id_doc1") + "'";
                Statement stPositifNegatif = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsPositifNegatif = stPositifNegatif.executeQuery(sqlPositifNegatif);

                String sqlPositifNegatif2 = "SELECT * FROM tb_filtering WHERE id_filtering='" + rsKernelPerhitungan.getString("id_doc2") + "'";
                Statement stPositifNegatif2 = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsPositifNegatif2 = stPositifNegatif2.executeQuery(sqlPositifNegatif2);

                while (rsPositifNegatif.next()) {
                    rsPositifNegatif.getString("kelas_dokumen");
                    while (rsPositifNegatif2.next()) {
                        rsPositifNegatif2.getString("kelas_dokumen");

                        //=$I$5*I5*(B23+($B$13^2))
                        hasilHessian = (float) (Float.parseFloat(rsPositifNegatif.getString("kelas_dokumen"))
                                * Float.parseFloat(rsPositifNegatif2.getString("kelas_dokumen"))
                                * (Float.parseFloat(rsKernelPerhitungan.getString("nilai"))
                                + (Math.pow((Float.parseFloat(rsSelectParameterY.getString("y"))), 2))));

                        String sqlInsertHessianMatrixPerhitungan = "INSERT INTO tb_matrix_hessian_perhitungan VALUES (null,'" + rsKernelPerhitungan.getString("id_doc1") + "','" + rsKernelPerhitungan.getString("id_doc2") + "','" + hasilHessian + "')";
                        st.executeUpdate(sqlInsertHessianMatrixPerhitungan);

                        //System.out.println(hasilHessian);
                    }
                }

            }

        }

        String sqlMatrixHessian = "SELECT * FROM tb_matrix_hessian_perhitungan";
        Statement stMatrixHessian = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsMatrixHessian = stMatrixHessian.executeQuery(sqlMatrixHessian);
        int a = 0;
        while (rsMatrixHessian.next()) {
            a = a + 1;

            Object[] oSelectKernel = new Object[8];
            oSelectKernel[0] = rsMatrixHessian.getString("id");
            oSelectKernel[1] = rsMatrixHessian.getString("id_doc_1");
            oSelectKernel[2] = rsMatrixHessian.getString("id_doc_2");
            oSelectKernel[3] = rsMatrixHessian.getString("nilai");
            //System.out.println(oSelectKernel[0] + " " + oSelectKernel[1] + " " + oSelectKernel[2] + " " + oSelectKernel[3]);

            String sqlUpdateKernel = "UPDATE tb_matrix_hessian SET `" + oSelectKernel[2] + "` = '" + oSelectKernel[3] + "' WHERE id='" + oSelectKernel[1] + "'";
            //System.out.println(sqlUpdateKernel);
            st.executeUpdate(sqlUpdateKernel);

        }

        int d = 0;

        tblHessian = new DefaultTableModel();
        TblMatriksHessian.setModel(tblHessian);
        tblHessian.addColumn("Id");
        tblHessian.addColumn("kalimat yang di eksekusi");

        String sqlCountHessian = "SELECT MAX(id_doc1) AS max FROM tb_kernel_polinomial_degree";
        Statement stCountHessian = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountHessian = stCountHessian.executeQuery(sqlCountHessian);

        while (rsCountHessian.next()) {
            for (d = 1; d <= Integer.parseInt(rsCountHessian.getString("max").toString()); d++) {
                tblHessian.addColumn(c);
            }
        }

        //hessian tampilkan tabel
        String sqlSelectAllhessian = "SELECT * FROM tb_matrix_hessian, tb_filtering WHERE tb_matrix_hessian.id = tb_filtering.id_filtering ";
        Statement stAllhessian = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsAllhessian = stAllhessian.executeQuery(sqlSelectAllhessian);
        while (rsAllhessian.next()) {
            Object[] oJumlahKata1 = new Object[d + 1];
            oJumlahKata1[0] = rsAllhessian.getString("id_filtering");
            oJumlahKata1[1] = rsAllhessian.getString("deskripsi_filtering");

            String sqlCountKernel11 = "SELECT MAX(id_doc_1) AS max FROM tb_matrix_hessian_perhitungan";
            Statement stCountKernel11 = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsCountKernel11 = stCountKernel11.executeQuery(sqlCountKernel11);

            while (rsCountKernel11.next()) {
                for (int e = 2; e <= Integer.parseInt(rsCountKernel11.getString("max").toString()) + 1; e++) {
                    oJumlahKata1[e] = rsAllhessian.getString(e);
                }
            }
            tblHessian.addRow(oJumlahKata1);
        }

    }

    private void termFrekuensi() throws SQLException {

        tblDokumen = new DefaultTableModel();
        TblDokumen.setModel(tblDokumen);
        tblDokumen.addColumn("Id");
        tblDokumen.addColumn("kalimat yang di eksekusi");
        tblDokumen.addColumn("kb+ (x1)");
        tblDokumen.addColumn("kk+ (x2)");
        tblDokumen.addColumn("ks+ (x3)");
        tblDokumen.addColumn("kb- (x4)");
        tblDokumen.addColumn("kk- (x5)");
        tblDokumen.addColumn("ks- (x6)");

        tblNormalisasi = new DefaultTableModel();
        TblNormalisasi.setModel(tblNormalisasi);
        tblNormalisasi.addColumn("Id");
        tblNormalisasi.addColumn("kalimat yang di eksekusi");
        tblNormalisasi.addColumn("kb+ (x1)");
        tblNormalisasi.addColumn("kk+ (x2)");
        tblNormalisasi.addColumn("ks+ (x3)");
        tblNormalisasi.addColumn("kb- (x4)");
        tblNormalisasi.addColumn("kk- (x5)");
        tblNormalisasi.addColumn("ks- (x6)");

        //Jumlah Kata
        String sqlSelectAllJumlahKata = "SELECT * FROM tb_jumlah_kata, tb_filtering WHERE tb_jumlah_kata.id = tb_filtering.id_filtering ";
        Statement stJumlahKata = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKata = stJumlahKata.executeQuery(sqlSelectAllJumlahKata);
        while (rsJumlahKata.next()) {
            Object[] oJumlahKata = new Object[8];
            oJumlahKata[0] = rsJumlahKata.getString("id");
            oJumlahKata[1] = rsJumlahKata.getString("deskripsi_filtering");
            oJumlahKata[2] = rsJumlahKata.getString("kbplus");
            oJumlahKata[3] = rsJumlahKata.getString("kkplus");
            oJumlahKata[4] = rsJumlahKata.getString("ksplus");
            oJumlahKata[5] = rsJumlahKata.getString("kbmin");
            oJumlahKata[6] = rsJumlahKata.getString("kkmin");
            oJumlahKata[7] = rsJumlahKata.getString("ksmin");
            tblDokumen.addRow(oJumlahKata);

        }

        Statement st = (Statement) jdbc.getConnection().createStatement();
        String sqlTruncateNormalisasi = "TRUNCATE tb_normalisasi";
        st.executeUpdate(sqlTruncateNormalisasi);

        //Max jumlah kata
        String sqlSelectCountJumlah = "SELECT max(id_filtering) as countKata FROM tb_tf_jumlah_kata";
        Statement stCountJumlah = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountJumlah = stCountJumlah.executeQuery(sqlSelectCountJumlah);
        while (rsCountJumlah.next()) {
            for (int i = 1; i <= Integer.parseInt(rsCountJumlah.getString("countKata")); i++) {

                String sqlInsertNormalisasi = "INSERT INTO tb_normalisasi (id, kbplus, kkplus, ksplus, kbmin, kkmin, ksmin) VALUES (null, 0, 0, 0, 0, 0, 0)";
                st.executeUpdate(sqlInsertNormalisasi);

                //Max jumlah kata
                String sqlSelectCountKBPlusMax = "SELECT max(kbplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKBPlusMax);
                Statement stCountKBPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKBPlusMax = stCountKBPlusMax.executeQuery(sqlSelectCountKBPlusMax);
                while (rsCountKBPlusMax.next()) {
                    String sqlSelectCountKBPlusMin = "SELECT min(kbplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKBPlusMin);
                    Statement stCountKBPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKBPlusMin = stCountKBPlusMin.executeQuery(sqlSelectCountKBPlusMin);
                    while (rsCountKBPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKBPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKBPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKBPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
//                            System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKBMinMax = "SELECT max(kbmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKBMinMax);
                Statement stCountKBMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKBMinMax = stCountKBMinMax.executeQuery(sqlSelectCountKBMinMax);
                while (rsCountKBMinMax.next()) {
                    String sqlSelectCountKBMinMin = "SELECT min(kbmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKBMinMin);
                    Statement stCountKBMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKBMinMin = stCountKBMinMin.executeQuery(sqlSelectCountKBMinMin);
                    while (rsCountKBMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKBMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKBMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKBMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

//                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else
                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
                                String sqlUpdateKBMinNormalisasi = "UPDATE tb_normalisasi SET kbmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
//                            System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBMinNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKSPlusMax = "SELECT max(ksplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKSPlusMax);
                Statement stCountKSPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKSPlusMax = stCountKSPlusMax.executeQuery(sqlSelectCountKSPlusMax);
                while (rsCountKSPlusMax.next()) {
                    String sqlSelectCountKSPlusMin = "SELECT min(kbplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKSPlusMin);
                    Statement stCountKSPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKSPlusMin = stCountKSPlusMin.executeQuery(sqlSelectCountKSPlusMin);
                    while (rsCountKSPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKSPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKSPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKSPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);

                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKSMinMax = "SELECT max(ksmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKSMinMax);
                Statement stCountKSMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKSMinMax = stCountKSMinMax.executeQuery(sqlSelectCountKSMinMax);
                while (rsCountKSMinMax.next()) {
                    String sqlSelectCountKSMinMin = "SELECT min(ksmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKSMinMin);
                    Statement stCountKSMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKSMinMin = stCountKSMinMin.executeQuery(sqlSelectCountKSMinMin);
                    while (rsCountKSMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKSMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKSMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKSMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
                                String sqlUpdateKSPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKSPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKSPlusNormalisasi);

                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKKPlusMax = "SELECT max(kkplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKKPlusMax);
                Statement stCountKKPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKKPlusMax = stCountKKPlusMax.executeQuery(sqlSelectCountKKPlusMax);
                while (rsCountKKPlusMax.next()) {
                    String sqlSelectCountKKPlusMin = "SELECT min(kkplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKKPlusMin);
                    Statement stCountKKPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKKPlusMin = stCountKKPlusMin.executeQuery(sqlSelectCountKKPlusMin);
                    while (rsCountKKPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKKPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKKPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKKPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
                                String sqlUpdateKKPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKKPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKKPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKKMinMax = "SELECT max(kkmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKKMinMax);
                Statement stCountKKMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKKMinMax = stCountKKMinMax.executeQuery(sqlSelectCountKKMinMax);
                while (rsCountKKMinMax.next()) {
                    String sqlSelectCountKKMinMin = "SELECT min(kkmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKKMinMin);
                    Statement stCountKKMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKKMinMin = stCountKKMinMin.executeQuery(sqlSelectCountKKMinMin);
                    while (rsCountKKMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKKMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKKMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKKMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
                                String sqlUpdateKKPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKKPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKKPlusNormalisasi);
                            }
                        }
                    }
                }
            }
        }

        //normalisasi
        String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_normalisasi, tb_filtering WHERE tb_normalisasi.id = tb_filtering.id_filtering ";
        Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

        while (rsNormalisasiHasil.next()) {
            Object[] oNormalisasiHasil = new Object[8];
            oNormalisasiHasil[0] = rsNormalisasiHasil.getString("id");
            oNormalisasiHasil[1] = rsNormalisasiHasil.getString("deskripsi_filtering");
            oNormalisasiHasil[2] = rsNormalisasiHasil.getString("kbplus");
            oNormalisasiHasil[3] = rsNormalisasiHasil.getString("kkplus");
            oNormalisasiHasil[4] = rsNormalisasiHasil.getString("ksplus");
            oNormalisasiHasil[5] = rsNormalisasiHasil.getString("kbmin");
            oNormalisasiHasil[6] = rsNormalisasiHasil.getString("kkmin");
            oNormalisasiHasil[7] = rsNormalisasiHasil.getString("ksmin");
            tblNormalisasi.addRow(oNormalisasiHasil);
        }
    }

}
