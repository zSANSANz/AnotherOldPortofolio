/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package svmradikalmetode;

import svmradikalmetode.utility.IndonesianSentenceTokenizer;
import svmradikalmetode.utility.jdbc;
import org.apache.commons.lang.StringUtils;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andri
 */
public class Data extends javax.swing.JPanel {
    IndonesianSentenceTokenizer iToken = null;
    private static DefaultTableModel tblDokumen;
    private static DefaultTableModel tblPenandaanFrase;
    private static DefaultTableModel tblTokenisasi;
    private static DefaultTableModel tblFiltering;
    
    private static DefaultTableModel tblDokumenDua;
    private static DefaultTableModel tblNormalisasi;
    
    public Data() throws SQLException {
        initComponents();
        //isteam = new IndonesianStemmer();
        iToken = new IndonesianSentenceTokenizer();
        tblDokumen = new DefaultTableModel();
        TblDokumen1.setModel(tblDokumen);
        tblDokumen.addColumn("No");
        tblDokumen.addColumn("Target");
        tblDokumen.addColumn("Dokumen");
        tblPenandaanFrase = new DefaultTableModel();
        TblPenandaanFrase.setModel(tblPenandaanFrase);
        tblPenandaanFrase.addColumn("No");
        tblPenandaanFrase.addColumn("Target");
        tblPenandaanFrase.addColumn("Penandaan Frase");
        tblTokenisasi = new DefaultTableModel();
        TblTokenisasi.setModel(tblTokenisasi);
        tblTokenisasi.addColumn("No");
        tblTokenisasi.addColumn("Target");
        tblTokenisasi.addColumn("Tokenisasi");
        tblFiltering = new DefaultTableModel();
        TblFiltering.setModel(tblFiltering);
        tblFiltering.addColumn("No");
        tblFiltering.addColumn("Target");
        tblFiltering.addColumn("Filtering");
        hitung();
        termFrekuensi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        TblDokumen1 = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        TblTokenisasi = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        TblFiltering = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        TblPenandaanFrase = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        TblDokumen = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        TblNormalisasi = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        jButton1.setText("Upload Dokumen");

        TblDokumen1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(TblDokumen1);

        TblTokenisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TblTokenisasi);

        TblFiltering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(TblFiltering);

        TblPenandaanFrase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TblPenandaanFrase);

        TblDokumen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(TblDokumen);

        jLabel9.setText("Term Frekuensi");

        TblNormalisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(TblNormalisasi);

        jLabel10.setText("Normalisasi TermFrekuensi");

        jLabel1.setText("Dokumen");

        jLabel2.setText("Penandaan Frase");

        jLabel3.setText("Tokenisasi");

        jLabel4.setText("Filtering");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                            .addComponent(jScrollPane7)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane14))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(388, 388, 388)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(368, 368, 368)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(376, 376, 376)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(381, 381, 381)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(358, 358, 358)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(274, 274, 274))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addGap(492, 492, 492))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 746, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TblDokumen;
    private javax.swing.JTable TblDokumen1;
    private javax.swing.JTable TblFiltering;
    private javax.swing.JTable TblNormalisasi;
    private javax.swing.JTable TblPenandaanFrase;
    private javax.swing.JTable TblTokenisasi;
    private javax.swing.JButton jButton1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables

    private void hitung() {
        try {
            
            Statement st = (Statement) jdbc.getConnection().createStatement();
            
            String sqlRefreshPandanganFrase = "TRUNCATE tb_pandangan_frase";
            Statement st1 = (Statement) jdbc.getConnection().createStatement();
            st1.executeUpdate(sqlRefreshPandanganFrase);

            String sqlRefreshTokenisasi = "TRUNCATE tb_tokenisasi";
            Statement st11 = (Statement) jdbc.getConnection().createStatement();
            st11.executeUpdate(sqlRefreshTokenisasi);

            String sqlRefreshFiltering = "TRUNCATE tb_filtering";
            Statement st111 = (Statement) jdbc.getConnection().createStatement();
            st111.executeUpdate(sqlRefreshFiltering);

            String sqlTruncateJumlahKata = "TRUNCATE tb_jumlah_kata";
            Statement st12 = (Statement) jdbc.getConnection().createStatement();
            st12.executeUpdate(sqlTruncateJumlahKata);
            
            String sqlSelectDoc = "SELECT * FROM tb_dokumen";
            Statement st3 = (Statement) jdbc.getConnection().createStatement();
            ResultSet rs = st3.executeQuery(sqlSelectDoc);

            tblDokumen.getDataVector().removeAllElements();
            tblDokumen.fireTableDataChanged();
            String penandaanFrase = null;
            while (rs.next()) {
                Object[] o = new Object[3];
                o[0] = rs.getString("id_dokumen");
                o[1] = rs.getString("kelas_dokumen");
                o[2] = rs.getString("deskripsi_dokumen");

                tblDokumen.addRow(o);
                //case folding
                String teks_case_folding = o[2].toString().toLowerCase().replaceAll("[^a-zA-Z\\s]", "").trim().replaceAll(" +", " ");
                //end case folding

                //Penandaan Frasa
                String sqlSelectFrasa = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%frasa%'";
                Statement stFrasa = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsFrasa = stFrasa.executeQuery(sqlSelectFrasa);
                penandaanFrase = teks_case_folding;
             
                while (rsFrasa.next()) {
                    penandaanFrase = penandaan_frase(rsFrasa.getString("nama_kata"),penandaanFrase);
                    System.out.println(penandaanFrase);
                }
                
                String sqlInsertPandanganFrase = "INSERT INTO tb_pandangan_frase(id_pandangan_frase, deskripsi_pandangan_frase, kelas_dokumen) VALUES(NULL, '" + penandaanFrase + "', " + o[1] + ")";
                System.out.println(sqlInsertPandanganFrase);
                st.executeUpdate(sqlInsertPandanganFrase);

                //tokenizing
                IndonesianSentenceTokenizer indonesianSentenceTokenizer = new IndonesianSentenceTokenizer();
                ArrayList<String> text_tokenizing = indonesianSentenceTokenizer.tokenizeSentence(penandaanFrase);
                //end tokenizing 

                String sqlInsertTokenisasi = "INSERT INTO tb_tokenisasi(id_tokenisasi, deskripsi_tokenisasi, kelas_dokumen) VALUES(NULL, '" + text_tokenizing + "', " + o[1] + ")";
                st.executeUpdate(sqlInsertTokenisasi);
            
            }

            String sqlSelectTokenisasi = "SELECT * FROM tb_tokenisasi";
            Statement st4 = (Statement) jdbc.getConnection().createStatement();
            ResultSet rs1 = st4.executeQuery(sqlSelectTokenisasi);

            while (rs1.next()) {
                Object[] o1 = new Object[3];
                o1[0] = rs1.getString("id_tokenisasi");
                o1[1] = rs1.getString("kelas_dokumen");
                o1[2] = rs1.getString("deskripsi_tokenisasi");

                //remove stopword /filtering
                String text_filter = removestopword(o1[2].toString());
                //filtering

                String sqlInsertFiltering = "INSERT INTO tb_filtering(id_filtering, deskripsi_filtering, kelas_dokumen) VALUES(NULL, '" + text_filter + "', " + o1[1] + ")";
                st.executeUpdate(sqlInsertFiltering);
            }

            String sqlSelectPenandaan = "SELECT * FROM tb_pandangan_frase";
            Statement stPenandaan = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsPenandaan = stPenandaan.executeQuery(sqlSelectPenandaan);

            tblPenandaanFrase.getDataVector().removeAllElements();
            tblPenandaanFrase.fireTableDataChanged();
            while (rsPenandaan.next()) {
                Object[] oPenandaan = new Object[3];
                oPenandaan[0] = rsPenandaan.getString("id_pandangan_frase");
                oPenandaan[1] = rsPenandaan.getString("kelas_dokumen");
                oPenandaan[2] = rsPenandaan.getString("deskripsi_pandangan_frase");

                tblPenandaanFrase.addRow(oPenandaan);
            }

            Statement stTokenisasi = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsTokenisasi = stTokenisasi.executeQuery(sqlSelectTokenisasi);

            tblTokenisasi.getDataVector().removeAllElements();
            tblTokenisasi.fireTableDataChanged();
            while (rsTokenisasi.next()) {
                Object[] oTokenisasi = new Object[3];
                oTokenisasi[0] = rsTokenisasi.getString("id_tokenisasi");
                oTokenisasi[1] = rsTokenisasi.getString("kelas_dokumen");
                oTokenisasi[2] = rsTokenisasi.getString("deskripsi_tokenisasi");

                tblTokenisasi.addRow(oTokenisasi);
            }

            String sqlSelectFiltering = "SELECT * FROM tb_filtering";
            Statement stFiltering = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFiltering = stFiltering.executeQuery(sqlSelectFiltering);

            tblFiltering.getDataVector().removeAllElements();
            tblFiltering.fireTableDataChanged();

            while (rsFiltering.next()) {
                Object[] oFiltering = new Object[3];
                oFiltering[0] = rsFiltering.getString("id_filtering");
                oFiltering[1] = rsFiltering.getString("kelas_dokumen");
                oFiltering[2] = rsFiltering.getString("deskripsi_filtering");

                tblFiltering.addRow(oFiltering);
            }

            //bersihkan dulu tabel perhitungan 
            String SqlTruncateTfJumlahKata = "TRUNCATE tb_tf_jumlah_kata";
            Statement stTruncateTfJumlahKata = (Statement) jdbc.getConnection().createStatement();
            stTruncateTfJumlahKata.executeUpdate(SqlTruncateTfJumlahKata);

            //Filering dicari KB+
            Statement stFilteringKBPlus = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFilteringKBPlus = stFilteringKBPlus.executeQuery(sqlSelectFiltering);
            String kalimatFilterKbPlus = null;
            int jumlahKBPlus;
            int hitungTfKbPlus = 0;
            while (rsFilteringKBPlus.next()) {
                jumlahKBPlus = 0;
                kalimatFilterKbPlus = rsFilteringKBPlus.getString("deskripsi_filtering");

                //KB+
                String sqlSelectKataKBPlus = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%benda%' and nilai_kata='1'";
                Statement stKbPlus = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsKbPlus = stKbPlus.executeQuery(sqlSelectKataKBPlus);
                while (rsKbPlus.next()) {
                    hitungTfKbPlus = StringUtils.countMatches(kalimatFilterKbPlus, rsKbPlus.getString("nama_kata"));
                    jumlahKBPlus = jumlahKBPlus + hitungTfKbPlus;

                }
                String sqlInsertKBPlus = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKBPlus.getString("id_filtering") + "', '" + jumlahKBPlus + "', 'benda', '1')";
                st.executeUpdate(sqlInsertKBPlus);
                String sqlInsertJumlahKata = "INSERT INTO tb_jumlah_kata (id, kbplus, kkplus, ksplus, kbmin, kkmin, ksmin) VALUES ('" + rsFilteringKBPlus.getString("id_filtering") + "', '" + jumlahKBPlus + "', 1, 1, 1, 1, 1)";
                //System.out.println(sqlInsertJumlahKata);
                st.executeUpdate(sqlInsertJumlahKata);
            }

            //Filering dicari KB-
            Statement stFilteringKBMin = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFilteringKBMin = stFilteringKBMin.executeQuery(sqlSelectFiltering);
            String kalimatFilterKbMin = null;
            int jumlahKBMin;
            int hitungTfKbMin = 0;
            while (rsFilteringKBMin.next()) {
                jumlahKBMin = 0;
                kalimatFilterKbMin = rsFilteringKBMin.getString("deskripsi_filtering");

                //KB-
                String sqlSelectKataKBMin = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%benda%' and nilai_kata='0'";
                Statement stKbMin = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsKbMin = stKbMin.executeQuery(sqlSelectKataKBMin);
                while (rsKbMin.next()) {
                    hitungTfKbMin = StringUtils.countMatches(kalimatFilterKbMin, rsKbMin.getString("nama_kata"));
                    jumlahKBMin = jumlahKBMin + hitungTfKbMin;
                }
                String sqlInsertKBMin = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKBMin.getString("id_filtering") + "', '" + jumlahKBMin + "', 'benda', '0')";
                st.executeUpdate(sqlInsertKBMin);
                
                String sqlUpdateJumlahKata = "UPDATE tb_jumlah_kata SET kbmin = '" + jumlahKBMin + "' WHERE id = '" + rsFilteringKBMin.getString("id_filtering") + "'";
                //System.out.println(sqlUpdateJumlahKata);
                st.executeUpdate(sqlUpdateJumlahKata);

            }

            //Filering dicari KK-
            Statement stFilteringKKMin = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFilteringKKMin = stFilteringKKMin.executeQuery(sqlSelectFiltering);
            String kalimatFilterKKMin = null;
            int jumlahKKMin;
            int hitungTfKkMin = 0;
            while (rsFilteringKKMin.next()) {
                jumlahKKMin = 0;
                kalimatFilterKKMin = rsFilteringKKMin.getString("deskripsi_filtering");

                //KK-
                String sqlSelectKataKKMin = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%kerja%' and nilai_kata='0'";
                Statement stKkMin = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsKkMin = stKkMin.executeQuery(sqlSelectKataKKMin);
                while (rsKkMin.next()) {
                    hitungTfKkMin = StringUtils.countMatches(kalimatFilterKKMin, rsKkMin.getString("nama_kata"));
                    jumlahKKMin = jumlahKKMin + hitungTfKkMin;
                }
                String sqlInsertKKMin = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKKMin.getString("id_filtering") + "', '" + jumlahKKMin + "', 'kerja', '0')";
                st.executeUpdate(sqlInsertKKMin);
                
                String sqlUpdateJumlahKata = "UPDATE tb_jumlah_kata SET kkmin = '" + jumlahKKMin + "' WHERE id = '" + rsFilteringKKMin.getString("id_filtering") + "'";
                //System.out.println(sqlUpdateJumlahKata);
                st.executeUpdate(sqlUpdateJumlahKata);

            }

            //Filering dicari KK+
            Statement stFilteringKKPlus = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFilteringKKPlus = stFilteringKKPlus.executeQuery(sqlSelectFiltering);
            String kalimatFilterKKPlus = null;
            int jumlahKKPlus;
            int hitungTfKkPlus = 0;
            while (rsFilteringKKPlus.next()) {
                jumlahKKPlus = 0;
                kalimatFilterKKPlus = rsFilteringKKPlus.getString("deskripsi_filtering");

                //KK+
                String sqlSelectKataKKPlus = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%kerja%' and nilai_kata='1'";
                Statement stKkPlus = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsKkPlus = stKkPlus.executeQuery(sqlSelectKataKKPlus);
                while (rsKkPlus.next()) {
                    hitungTfKkPlus = StringUtils.countMatches(kalimatFilterKKPlus, rsKkPlus.getString("nama_kata"));
                    jumlahKKPlus = jumlahKKPlus + hitungTfKkPlus;
                }
                String sqlInsertKKPlus = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKKPlus.getString("id_filtering") + "', '" + jumlahKKPlus + "', 'kerja', '1')";
                st.executeUpdate(sqlInsertKKPlus);
                
                String sqlUpdateJumlahKata = "UPDATE tb_jumlah_kata SET kkplus = '" + jumlahKKPlus + "' WHERE id = '" + rsFilteringKKPlus.getString("id_filtering") + "'";
                //System.out.println(sqlUpdateJumlahKata);
                st.executeUpdate(sqlUpdateJumlahKata);

            }

            //Filering dicari KS+
            Statement stFilteringKSPlus = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFilteringKSPlus = stFilteringKSPlus.executeQuery(sqlSelectFiltering);
            String kalimatFilterKSPlus = null;
            int jumlahKSPlus;
            int hitungTfKsPlus = 0;
            while (rsFilteringKSPlus.next()) {
                jumlahKSPlus = 0;
                kalimatFilterKSPlus = rsFilteringKSPlus.getString("deskripsi_filtering");

                //KS+
                String sqlSelectKataKSPlus = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%sifat%' and nilai_kata='1'";
                Statement stKsPlus = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsKsPlus = stKsPlus.executeQuery(sqlSelectKataKSPlus);
                while (rsKsPlus.next()) {
                    hitungTfKsPlus = StringUtils.countMatches(kalimatFilterKSPlus, rsKsPlus.getString("nama_kata"));
                    jumlahKSPlus = jumlahKSPlus + hitungTfKsPlus;
                }
                String sqlInsertKSPlus = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKSPlus.getString("id_filtering") + "', '" + jumlahKSPlus + "', 'sifat', '1')";
                st.executeUpdate(sqlInsertKSPlus);
                
                String sqlUpdateJumlahKata = "UPDATE tb_jumlah_kata SET ksplus = '" + jumlahKSPlus + "' WHERE id = '" + rsFilteringKSPlus.getString("id_filtering") + "'";
                //System.out.println(sqlUpdateJumlahKata);
                st.executeUpdate(sqlUpdateJumlahKata);

            }

            //Filering dicari KS-
            Statement stFilteringKSMin = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsFilteringKSMin = stFilteringKSMin.executeQuery(sqlSelectFiltering);
            String kalimatFilterKSMin = null;
            int jumlahKSMin;
            int hitungTfKsMin = 0;
            while (rsFilteringKSMin.next()) {
                jumlahKSMin = 0;
                kalimatFilterKSMin = rsFilteringKSMin.getString("deskripsi_filtering");

                //KS-
                String sqlSelectKataKSMin = "SELECT * FROM tb_kata WHERE tipe_kata LIKE '%sifat%' and nilai_kata='0'";
                Statement stKsMin = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsKsMin = stKsMin.executeQuery(sqlSelectKataKSMin);
                while (rsKsMin.next()) {
                    hitungTfKsMin = StringUtils.countMatches(kalimatFilterKSMin, rsKsMin.getString("nama_kata"));
                    jumlahKSMin = jumlahKSMin + hitungTfKsMin;
                }
                String sqlInsertKSMin = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKSMin.getString("id_filtering") + "', '" + jumlahKSMin + "', 'sifat', '0')";
                st.executeUpdate(sqlInsertKSMin);
                
                String sqlUpdateJumlahKata = "UPDATE tb_jumlah_kata SET ksmin = '" + jumlahKSMin + "' WHERE id = '" + rsFilteringKSMin.getString("id_filtering") + "'";
                //System.out.println(sqlUpdateJumlahKata);
                st.executeUpdate(sqlUpdateJumlahKata);

            }

//            //frasa kata perhitungan sendiri (tetapi tidak jadi)
//            //Filering dicari KB+
//            Statement stFilteringKBPlusFrasa = (Statement) jdbc.getConnection().createStatement();
//            ResultSet rsFilteringKBPlusFrasa = stFilteringKBPlusFrasa.executeQuery(sqlSelectFiltering);
//            String kalimatFilterKbPlusFrasa = null;
//            int jumlahKBPlusFrasa;
//            int hitungTfKbPlusFrasa = 0;
//            while (rsFilteringKBPlusFrasa.next()) {
//                jumlahKBPlusFrasa = 0;
//                kalimatFilterKbPlusFrasa = rsFilteringKBPlusFrasa.getString("deskripsi_filtering");
//
//                //KB+
//                String sqlSelectKataKBPlusFrasa = "SELECT * FROM tb_kata WHERE tipe_kata='frasa_benda' and nilai_kata='1'";
//                Statement stKbPlusFrasa = (Statement) jdbc.getConnection().createStatement();
//                ResultSet rsKbPlusFrasa = stKbPlusFrasa.executeQuery(sqlSelectKataKBPlusFrasa);
//                while (rsKbPlusFrasa.next()) {
//                    hitungTfKbPlusFrasa = StringUtils.countMatches(kalimatFilterKbPlusFrasa, rsKbPlusFrasa.getString("nama_kata"));
//                    jumlahKBPlusFrasa = jumlahKBPlusFrasa + hitungTfKbPlusFrasa;
//
//                }
//                String sqlInsertKBPlusFrasa = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKBPlusFrasa.getString("id_filtering") + "', '" + jumlahKBPlusFrasa + "', 'frasa_benda', '1')";
//                st.executeUpdate(sqlInsertKBPlusFrasa);
//
//            }
//
//            //Filering dicari KB-
//            Statement stFilteringKBMinFrasa = (Statement) jdbc.getConnection().createStatement();
//            ResultSet rsFilteringKBMinFrasa = stFilteringKBMinFrasa.executeQuery(sqlSelectFiltering);
//            String kalimatFilterKbMinFrasa = null;
//            int jumlahKBMinFrasa;
//            int hitungTfKbMinFrasa = 0;
//            while (rsFilteringKBMinFrasa.next()) {
//                jumlahKBMinFrasa = 0;
//                kalimatFilterKbMinFrasa = rsFilteringKBMinFrasa.getString("deskripsi_filtering");
//
//                //KB+
//                String sqlSelectKataKBMinFrasa = "SELECT * FROM tb_kata WHERE tipe_kata='frasa_benda' and nilai_kata='0'";
//                Statement stKbMinFrasa = (Statement) jdbc.getConnection().createStatement();
//                ResultSet rsKbMinFrasa = stKbMinFrasa.executeQuery(sqlSelectKataKBMinFrasa);
//                while (rsKbMinFrasa.next()) {
//                    hitungTfKbMinFrasa = StringUtils.countMatches(kalimatFilterKbMinFrasa, rsKbMinFrasa.getString("nama_kata"));
//                    jumlahKBMinFrasa = jumlahKBMinFrasa + hitungTfKbMinFrasa;
//                }
//                String sqlInsertKBMinFrasa = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKBMinFrasa.getString("id_filtering") + "', '" + jumlahKBMinFrasa + "', 'frasa_benda', '0')";
//                st.executeUpdate(sqlInsertKBMinFrasa);
//
//            }
//
//            //Filering dicari KK-
//            Statement stFilteringKKMinFrasa = (Statement) jdbc.getConnection().createStatement();
//            ResultSet rsFilteringKKMinFrasa = stFilteringKKMinFrasa.executeQuery(sqlSelectFiltering);
//            String kalimatFilterKKMinFrasa = null;
//            int jumlahKKMinFrasa;
//            int hitungTfKkMinFrasa = 0;
//            while (rsFilteringKKMinFrasa.next()) {
//                jumlahKKMinFrasa = 0;
//                kalimatFilterKKMinFrasa = rsFilteringKKMinFrasa.getString("deskripsi_filtering");
//
//                //KB+
//                String sqlSelectKataKKMinFrasa = "SELECT * FROM tb_kata WHERE tipe_kata='frasa_kerja' and nilai_kata='0'";
//                Statement stKkMinFrasa = (Statement) jdbc.getConnection().createStatement();
//                ResultSet rsKkMinFrasa = stKkMinFrasa.executeQuery(sqlSelectKataKKMinFrasa);
//                while (rsKkMinFrasa.next()) {
//                    hitungTfKkMinFrasa = StringUtils.countMatches(kalimatFilterKKMinFrasa, rsKkMinFrasa.getString("nama_kata"));
//                    jumlahKKMinFrasa = jumlahKKMinFrasa + hitungTfKkMinFrasa;
//                }
//                String sqlInsertKKMinFrasa = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKKMinFrasa.getString("id_filtering") + "', '" + jumlahKKMinFrasa + "', 'frasa_kerja', '0')";
//                st.executeUpdate(sqlInsertKKMinFrasa);
//
//            }
//
//            //Filering dicari KK+
//            Statement stFilteringKKPlusFrasa = (Statement) jdbc.getConnection().createStatement();
//            ResultSet rsFilteringKKPlusFrasa = stFilteringKKPlusFrasa.executeQuery(sqlSelectFiltering);
//            String kalimatFilterKKPlusFrasa = null;
//            int jumlahKKPlusFrasa;
//            int hitungTfKkPlusFrasa = 0;
//            while (rsFilteringKKPlusFrasa.next()) {
//                jumlahKKPlusFrasa = 0;
//                kalimatFilterKKPlusFrasa = rsFilteringKKPlusFrasa.getString("deskripsi_filtering");
//
//                //KB+
//                String sqlSelectKataKKPlusFrasa = "SELECT * FROM tb_kata WHERE tipe_kata='frasa_kerja' and nilai_kata='1'";
//                Statement stKkPlusFrasa = (Statement) jdbc.getConnection().createStatement();
//                ResultSet rsKkPlusFrasa = stKkPlusFrasa.executeQuery(sqlSelectKataKKPlusFrasa);
//                while (rsKkPlusFrasa.next()) {
//                    hitungTfKkPlusFrasa = StringUtils.countMatches(kalimatFilterKKPlusFrasa, rsKkPlusFrasa.getString("nama_kata"));
//                    jumlahKKPlusFrasa = jumlahKKPlusFrasa + hitungTfKkPlusFrasa;
//                }
//                String sqlInsertKKPlus = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKKPlusFrasa.getString("id_filtering") + "', '" + jumlahKKPlusFrasa + "', 'kerja', '1')";
//                st.executeUpdate(sqlInsertKKPlus);
//
//            }
//
//            //Filering dicari KS+
//            Statement stFilteringKSPlusFrasa = (Statement) jdbc.getConnection().createStatement();
//            ResultSet rsFilteringKSPlusFrasa = stFilteringKSPlusFrasa.executeQuery(sqlSelectFiltering);
//            String kalimatFilterKSPlusFrasa = null;
//            int jumlahKSPlusFrasa;
//            int hitungTfKsPlusFrasa = 0;
//            while (rsFilteringKSPlusFrasa.next()) {
//                jumlahKSPlusFrasa = 0;
//                kalimatFilterKSPlusFrasa = rsFilteringKSPlusFrasa.getString("deskripsi_filtering");
//
//                //KB+
//                String sqlSelectKataKSPlusFrasa = "SELECT * FROM tb_kata WHERE tipe_kata='frasa_sifat' and nilai_kata='1'";
//                Statement stKsPlusFrasa = (Statement) jdbc.getConnection().createStatement();
//                ResultSet rsKsPlusFrasa = stKsPlusFrasa.executeQuery(sqlSelectKataKSPlusFrasa);
//                while (rsKsPlusFrasa.next()) {
//                    hitungTfKsPlusFrasa = StringUtils.countMatches(kalimatFilterKSPlusFrasa, rsKsPlusFrasa.getString("nama_kata"));
//                    jumlahKSPlusFrasa = jumlahKSPlusFrasa + hitungTfKsPlusFrasa;
//                }
//                String sqlInsertKSPlusFrasa = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKSPlusFrasa.getString("id_filtering") + "', '" + jumlahKSPlusFrasa + "', 'frasa_sifat', '1')";
//                st.executeUpdate(sqlInsertKSPlusFrasa);
//
//            }
//
//            //Filering dicari KS-
//            Statement stFilteringKSMinFrasa = (Statement) jdbc.getConnection().createStatement();
//            ResultSet rsFilteringKSMinFrasa = stFilteringKSMinFrasa.executeQuery(sqlSelectFiltering);
//            String kalimatFilterKSMinFrasa = null;
//            int jumlahKSMinFrasa;
//            int hitungTfKsMinFrasa = 0;
//            while (rsFilteringKSMinFrasa.next()) {
//                jumlahKSMinFrasa = 0;
//                kalimatFilterKSMinFrasa = rsFilteringKSMinFrasa.getString("deskripsi_filtering");
//
//                //KB+
//                String sqlSelectKataKSMinFrasa = "SELECT * FROM tb_kata WHERE tipe_kata='sifat' and nilai_kata='0'";
//                Statement stKsMinFrasa = (Statement) jdbc.getConnection().createStatement();
//                ResultSet rsKsMinFrasa = stKsMinFrasa.executeQuery(sqlSelectKataKSMinFrasa);
//                while (rsKsMinFrasa.next()) {
//                    hitungTfKsMinFrasa = StringUtils.countMatches(kalimatFilterKSMin, rsKsMinFrasa.getString("nama_kata"));
//                    jumlahKSMinFrasa = jumlahKSMinFrasa + hitungTfKsMinFrasa;
//                }
//                String sqlInsertKSMin = "INSERT INTO tb_tf_jumlah_kata (id_tf_jumlah_kata, id_filtering, jumlah_kata, tipe_kata, nilai_kata) VALUES (NULL, '" + rsFilteringKSMinFrasa.getString("id_filtering") + "', '" + jumlahKSMinFrasa + "', 'sifat', '0')";
//                st.executeUpdate(sqlInsertKSMin);
//
//            }

        } catch (SQLException ex) {
            Logger.getLogger(Data.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Terjadi Kesalahan Silahkan Hubungi Administrator");
        }
    }
    
    String penandaan_frase(String frasa, String isi_dokumen) {

        String[] frasa_kata = frasa.split(" ");
        String frasa_tertanda = Arrays.toString(frasa_kata).replace(" ", "").replace("[","").replace("]","").replace(",","-");
        //System.out.println(frasa_tertanda);
        isi_dokumen = isi_dokumen.replace(frasa, frasa_tertanda);
        return isi_dokumen;
    }
    
    public static String removestopword(String kata) {
        try {

            Statement s = (Statement) jdbc.getConnection().createStatement();
            String sql = "SELECT * FROM stopword";
            ResultSet r = s.executeQuery(sql);

            while (r.next()) {

                kata = kata.replaceAll("\\b" + r.getString("kata") + "\\b", "");

            }
            r.close();
            s.close();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Gagal koneksi " + e);
        }
        return kata;
    }

    private void termFrekuensi() throws SQLException {
        tblDokumenDua = new DefaultTableModel();
        TblDokumen.setModel(tblDokumenDua);
        tblDokumenDua.addColumn("No");
        tblDokumenDua.addColumn("kalimat yang di eksekusi");
        tblDokumenDua.addColumn("kb+ (x1)");
        tblDokumenDua.addColumn("kk+ (x2)");
        tblDokumenDua.addColumn("ks+ (x3)");
        tblDokumenDua.addColumn("kb- (x4)");
        tblDokumenDua.addColumn("kk- (x5)");
        tblDokumenDua.addColumn("ks- (x6)");
        
        tblNormalisasi = new DefaultTableModel();
        TblNormalisasi.setModel(tblNormalisasi);
        tblNormalisasi.addColumn("No");
        tblNormalisasi.addColumn("kalimat yang di eksekusi");
        tblNormalisasi.addColumn("kb+ (x1)");
        tblNormalisasi.addColumn("kk+ (x2)");
        tblNormalisasi.addColumn("ks+ (x3)");
        tblNormalisasi.addColumn("kb- (x4)");
        tblNormalisasi.addColumn("kk- (x5)");
        tblNormalisasi.addColumn("ks- (x6)");

        //Jumlah Kata
        String sqlSelectAllJumlahKata = "SELECT * FROM tb_jumlah_kata, tb_filtering WHERE tb_jumlah_kata.id = tb_filtering.id_filtering ";
        Statement stJumlahKata = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKata = stJumlahKata.executeQuery(sqlSelectAllJumlahKata);
        while (rsJumlahKata.next()) {
            Object[] oJumlahKata = new Object[8];
            oJumlahKata[0] = rsJumlahKata.getString("id");
            oJumlahKata[1] = rsJumlahKata.getString("deskripsi_filtering");
            oJumlahKata[2] = rsJumlahKata.getString("kbplus");
            oJumlahKata[3] = rsJumlahKata.getString("kkplus");
            oJumlahKata[4] = rsJumlahKata.getString("ksplus");
            oJumlahKata[5] = rsJumlahKata.getString("kbmin");
            oJumlahKata[6] = rsJumlahKata.getString("kkmin");
            oJumlahKata[7] = rsJumlahKata.getString("ksmin");
            tblDokumenDua.addRow(oJumlahKata);

        }
        
        Statement st = (Statement) jdbc.getConnection().createStatement();
        String sqlTruncateNormalisasi = "TRUNCATE tb_normalisasi";
        st.executeUpdate(sqlTruncateNormalisasi);

        //Max jumlah kata
        String sqlSelectCountJumlah = "SELECT max(id_filtering) as countKata FROM tb_tf_jumlah_kata";
        Statement stCountJumlah = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountJumlah = stCountJumlah.executeQuery(sqlSelectCountJumlah);
        while (rsCountJumlah.next()) {
            for (int i = 1; i <= Integer.parseInt(rsCountJumlah.getString("countKata")); i++) {

                String sqlInsertNormalisasi = "INSERT INTO tb_normalisasi (id, kbplus, kkplus, ksplus, kbmin, kkmin, ksmin) VALUES (null, 0, 0, 0, 0, 0, 0)";
                st.executeUpdate(sqlInsertNormalisasi);

                //Max jumlah kata
                String sqlSelectCountKBPlusMax = "SELECT max(kbplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKBPlusMax);
                Statement stCountKBPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKBPlusMax = stCountKBPlusMax.executeQuery(sqlSelectCountKBPlusMax);
                while (rsCountKBPlusMax.next()) {
                    String sqlSelectCountKBPlusMin = "SELECT min(kbplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKBPlusMin);
                    Statement stCountKBPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKBPlusMin = stCountKBPlusMin.executeQuery(sqlSelectCountKBPlusMin);
                    while (rsCountKBPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKBPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKBPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKBPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
//                            System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKBMinMax = "SELECT max(kbmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKBMinMax);
                Statement stCountKBMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKBMinMax = stCountKBMinMax.executeQuery(sqlSelectCountKBMinMax);
                while (rsCountKBMinMax.next()) {
                    String sqlSelectCountKBMinMin = "SELECT min(kbmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKBMinMin);
                    Statement stCountKBMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKBMinMin = stCountKBMinMin.executeQuery(sqlSelectCountKBMinMin);
                    while (rsCountKBMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKBMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKBMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKBMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

//                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else
                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
                                String sqlUpdateKBMinNormalisasi = "UPDATE tb_normalisasi SET kbmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
//                            System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBMinNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKSPlusMax = "SELECT max(ksplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKSPlusMax);
                Statement stCountKSPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKSPlusMax = stCountKSPlusMax.executeQuery(sqlSelectCountKSPlusMax);
                while (rsCountKSPlusMax.next()) {
                    String sqlSelectCountKSPlusMin = "SELECT min(kbplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKSPlusMin);
                    Statement stCountKSPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKSPlusMin = stCountKSPlusMin.executeQuery(sqlSelectCountKSPlusMin);
                    while (rsCountKSPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKSPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKSPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKSPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);

                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKSMinMax = "SELECT max(ksmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKSMinMax);
                Statement stCountKSMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKSMinMax = stCountKSMinMax.executeQuery(sqlSelectCountKSMinMax);
                while (rsCountKSMinMax.next()) {
                    String sqlSelectCountKSMinMin = "SELECT min(ksmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKSMinMin);
                    Statement stCountKSMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKSMinMin = stCountKSMinMin.executeQuery(sqlSelectCountKSMinMin);
                    while (rsCountKSMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKSMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKSMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKSMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
                                String sqlUpdateKSPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKSPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKSPlusNormalisasi);

                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKKPlusMax = "SELECT max(kkplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKKPlusMax);
                Statement stCountKKPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKKPlusMax = stCountKKPlusMax.executeQuery(sqlSelectCountKKPlusMax);
                while (rsCountKKPlusMax.next()) {
                    String sqlSelectCountKKPlusMin = "SELECT min(kkplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKKPlusMin);
                    Statement stCountKKPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKKPlusMin = stCountKKPlusMin.executeQuery(sqlSelectCountKKPlusMin);
                    while (rsCountKKPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKKPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKKPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKKPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
                                String sqlUpdateKKPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKKPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKKPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKKMinMax = "SELECT max(kkmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKKMinMax);
                Statement stCountKKMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKKMinMax = stCountKKMinMax.executeQuery(sqlSelectCountKKMinMax);
                while (rsCountKKMinMax.next()) {
                    String sqlSelectCountKKMinMin = "SELECT min(kkmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKKMinMin);
                    Statement stCountKKMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKKMinMin = stCountKKMinMin.executeQuery(sqlSelectCountKKMinMin);
                    while (rsCountKKMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKKMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKKMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKKMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
                                String sqlUpdateKKPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKKPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKKPlusNormalisasi);
                            }
                        }
                    }
                }
            }
        }

        //normalisasi
        String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_normalisasi, tb_filtering WHERE tb_normalisasi.id = tb_filtering.id_filtering ";
        Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

        while (rsNormalisasiHasil.next()) {
            Object[] oNormalisasiHasil = new Object[8];
            oNormalisasiHasil[0] = rsNormalisasiHasil.getString("id");
            oNormalisasiHasil[1] = rsNormalisasiHasil.getString("deskripsi_filtering");
            oNormalisasiHasil[2] = rsNormalisasiHasil.getString("kbplus");
            oNormalisasiHasil[3] = rsNormalisasiHasil.getString("kkplus");
            oNormalisasiHasil[4] = rsNormalisasiHasil.getString("ksplus");
            oNormalisasiHasil[5] = rsNormalisasiHasil.getString("kbmin");
            oNormalisasiHasil[6] = rsNormalisasiHasil.getString("kkmin");
            oNormalisasiHasil[7] = rsNormalisasiHasil.getString("ksmin");
            tblNormalisasi.addRow(oNormalisasiHasil);
        }
    }
}
