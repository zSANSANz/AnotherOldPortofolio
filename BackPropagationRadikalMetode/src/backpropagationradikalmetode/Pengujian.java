/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backpropagationradikalmetode;

import backpropagationradikalmetode.utility.jdbc;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andri
 */
public class Pengujian extends javax.swing.JPanel {

    private static DefaultTableModel tbl13;
    private static DefaultTableModel tbl9NilaiBiasAwal;
    private static DefaultTableModel tblW10;

    //data uji
    private static DefaultTableModel tblFeedforward;
    private static DefaultTableModel tblHiddenLayer;
    private static DefaultTableModel tblSinyal;
    private static DefaultTableModel tblSinyalOutput;
    private static DefaultTableModel tblSinyalOutput1;
    private static DefaultTableModel tblGabung;

    /**
     * Creates new form Data
     *
     * @throws java.sql.SQLException
     */
    public Pengujian() throws SQLException {
        initComponents();
        aktivasiTable13();
        tampilkanTb13();
        aktivasiTable9NilaiBiasAwal();
        tampilkanTable9NilaiBiasAwal();
        aktivasiTableW();
        tampilkanTableW();

        //pengujian
        FeedForwardConfig();
        hiddenLayerConfig();
        sinyalTableConfig();
        sinyalOutputTableConfig();

        //langkahSatu();
        langkahDua();
        langkahKetiga();
        tampilkanSatu();
        tampilkanDua();
        tampilkanTiga();
        tampilkanEmpat();
        sinyalOutputTableConfig1();
        langkahKelima();
        tampilkanLima();

        aktivasiGabung();
        tampilkanGabung();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        Tbl13 = new javax.swing.JTable();
        jScrollPane28 = new javax.swing.JScrollPane();
        Tbl9NilaiBiasAwal = new javax.swing.JTable();
        jScrollPane27 = new javax.swing.JScrollPane();
        TblW10 = new javax.swing.JTable();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        TblFeedforward = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        TblHiddenLayer = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        TblSinyal = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        TblSinyalOutput = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        TblSinyalOutput1 = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        TblGabung = new javax.swing.JTable();

        jInternalFrame1.setVisible(true);

        Tbl13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane22.setViewportView(Tbl13);

        Tbl9NilaiBiasAwal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane28.setViewportView(Tbl9NilaiBiasAwal);

        TblW10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane27.setViewportView(TblW10);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 3684, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane27, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1083, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jInternalFrame2.setVisible(true);

        TblFeedforward.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(TblFeedforward);

        TblHiddenLayer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(TblHiddenLayer);

        TblSinyal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(TblSinyal);

        TblSinyalOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane16.setViewportView(TblSinyalOutput);

        TblSinyalOutput1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane17.setViewportView(TblSinyalOutput1);

        TblGabung.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(TblGabung);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(1160, Short.MAX_VALUE)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, 0)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(185, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(219, Short.MAX_VALUE)))
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1084, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tbl13;
    private javax.swing.JTable Tbl9NilaiBiasAwal;
    private javax.swing.JTable TblFeedforward;
    private javax.swing.JTable TblGabung;
    private javax.swing.JTable TblHiddenLayer;
    private javax.swing.JTable TblSinyal;
    private javax.swing.JTable TblSinyalOutput;
    private javax.swing.JTable TblSinyalOutput1;
    private javax.swing.JTable TblW10;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    // End of variables declaration//GEN-END:variables

    private void aktivasiTable13() {
        tbl13 = new DefaultTableModel();
        Tbl13.setModel(tbl13);
        tbl13.addColumn("data_ke");
        tbl13.addColumn("v11");
        tbl13.addColumn("v21");
        tbl13.addColumn("v31");
        tbl13.addColumn("v41");
        tbl13.addColumn("v51");
        tbl13.addColumn("v61");
        tbl13.addColumn("v12");
        tbl13.addColumn("v22");
        tbl13.addColumn("v32");
        tbl13.addColumn("v42");
        tbl13.addColumn("v52");
        tbl13.addColumn("v62");
        tbl13.addColumn("v13");
        tbl13.addColumn("v23");
        tbl13.addColumn("v33");
        tbl13.addColumn("v43");
        tbl13.addColumn("v53");
        tbl13.addColumn("v63");
        tbl13.addColumn("v14");
        tbl13.addColumn("v24");
        tbl13.addColumn("v34");
        tbl13.addColumn("v44");
        tbl13.addColumn("v54");
        tbl13.addColumn("v64");
        tbl13.addColumn("v15");
        tbl13.addColumn("v25");
        tbl13.addColumn("v35");
        tbl13.addColumn("v45");
        tbl13.addColumn("v55");
        tbl13.addColumn("v65");
        tbl13.addColumn("v16");
        tbl13.addColumn("v26");
        tbl13.addColumn("v36");
        tbl13.addColumn("v46");
        tbl13.addColumn("v56");
        tbl13.addColumn("v66");
        tbl13.addColumn("iterasi_ke");

    }

    private void tampilkanTb13() throws SQLException {
        String sqlDokMax = "SELECT MAX(dokumen_ke) AS dok_max FROM tb_13";
        Statement statementDokMax = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetDokMax = statementDokMax.executeQuery(sqlDokMax);
        while (resultSetDokMax.next()) {

            String sqlIterMax = "SELECT MAX(iterasi_ke) AS iter_max FROM tb_13";
            Statement statementIterMax = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetIterMax = statementIterMax.executeQuery(sqlIterMax);
            while (resultSetIterMax.next()) {

                String sqlSelectSinyalOutputDeltaV13 = "SELECT * FROM tb_13 WHERE iterasi_ke = " + resultSetIterMax.getString("iter_max") + " AND dokumen_ke = " + resultSetDokMax.getString("dok_max");
                Statement statementSelectSinyalOutputDeltaV13 = (Statement) jdbc.getConnection().createStatement();
                ResultSet resultSetSelectSinyalOutputDeltaV13 = statementSelectSinyalOutputDeltaV13.executeQuery(sqlSelectSinyalOutputDeltaV13);

                while (resultSetSelectSinyalOutputDeltaV13.next()) {
                    Object[] objectSetSelectSinyalOutputDeltaV13 = new Object[38];
                    objectSetSelectSinyalOutputDeltaV13[0] = resultSetSelectSinyalOutputDeltaV13.getString("dokumen_ke");
                    objectSetSelectSinyalOutputDeltaV13[1] = resultSetSelectSinyalOutputDeltaV13.getString("v11");
                    objectSetSelectSinyalOutputDeltaV13[2] = resultSetSelectSinyalOutputDeltaV13.getString("v21");
                    objectSetSelectSinyalOutputDeltaV13[3] = resultSetSelectSinyalOutputDeltaV13.getString("v31");
                    objectSetSelectSinyalOutputDeltaV13[4] = resultSetSelectSinyalOutputDeltaV13.getString("v41");
                    objectSetSelectSinyalOutputDeltaV13[5] = resultSetSelectSinyalOutputDeltaV13.getString("v51");
                    objectSetSelectSinyalOutputDeltaV13[6] = resultSetSelectSinyalOutputDeltaV13.getString("v61");

                    objectSetSelectSinyalOutputDeltaV13[7] = resultSetSelectSinyalOutputDeltaV13.getString("v12");
                    objectSetSelectSinyalOutputDeltaV13[8] = resultSetSelectSinyalOutputDeltaV13.getString("v22");
                    objectSetSelectSinyalOutputDeltaV13[9] = resultSetSelectSinyalOutputDeltaV13.getString("v32");
                    objectSetSelectSinyalOutputDeltaV13[10] = resultSetSelectSinyalOutputDeltaV13.getString("v42");
                    objectSetSelectSinyalOutputDeltaV13[11] = resultSetSelectSinyalOutputDeltaV13.getString("v52");
                    objectSetSelectSinyalOutputDeltaV13[12] = resultSetSelectSinyalOutputDeltaV13.getString("v62");

                    objectSetSelectSinyalOutputDeltaV13[13] = resultSetSelectSinyalOutputDeltaV13.getString("v13");
                    objectSetSelectSinyalOutputDeltaV13[14] = resultSetSelectSinyalOutputDeltaV13.getString("v23");
                    objectSetSelectSinyalOutputDeltaV13[15] = resultSetSelectSinyalOutputDeltaV13.getString("v33");
                    objectSetSelectSinyalOutputDeltaV13[16] = resultSetSelectSinyalOutputDeltaV13.getString("v43");
                    objectSetSelectSinyalOutputDeltaV13[17] = resultSetSelectSinyalOutputDeltaV13.getString("v53");
                    objectSetSelectSinyalOutputDeltaV13[18] = resultSetSelectSinyalOutputDeltaV13.getString("v63");

                    objectSetSelectSinyalOutputDeltaV13[19] = resultSetSelectSinyalOutputDeltaV13.getString("v14");
                    objectSetSelectSinyalOutputDeltaV13[20] = resultSetSelectSinyalOutputDeltaV13.getString("v24");
                    objectSetSelectSinyalOutputDeltaV13[21] = resultSetSelectSinyalOutputDeltaV13.getString("v34");
                    objectSetSelectSinyalOutputDeltaV13[22] = resultSetSelectSinyalOutputDeltaV13.getString("v44");
                    objectSetSelectSinyalOutputDeltaV13[23] = resultSetSelectSinyalOutputDeltaV13.getString("v54");
                    objectSetSelectSinyalOutputDeltaV13[24] = resultSetSelectSinyalOutputDeltaV13.getString("v64");

                    objectSetSelectSinyalOutputDeltaV13[25] = resultSetSelectSinyalOutputDeltaV13.getString("v15");
                    objectSetSelectSinyalOutputDeltaV13[26] = resultSetSelectSinyalOutputDeltaV13.getString("v25");
                    objectSetSelectSinyalOutputDeltaV13[27] = resultSetSelectSinyalOutputDeltaV13.getString("v35");
                    objectSetSelectSinyalOutputDeltaV13[28] = resultSetSelectSinyalOutputDeltaV13.getString("v45");
                    objectSetSelectSinyalOutputDeltaV13[29] = resultSetSelectSinyalOutputDeltaV13.getString("v55");
                    objectSetSelectSinyalOutputDeltaV13[30] = resultSetSelectSinyalOutputDeltaV13.getString("v65");

                    objectSetSelectSinyalOutputDeltaV13[31] = resultSetSelectSinyalOutputDeltaV13.getString("v16");
                    objectSetSelectSinyalOutputDeltaV13[32] = resultSetSelectSinyalOutputDeltaV13.getString("v26");
                    objectSetSelectSinyalOutputDeltaV13[33] = resultSetSelectSinyalOutputDeltaV13.getString("v36");
                    objectSetSelectSinyalOutputDeltaV13[34] = resultSetSelectSinyalOutputDeltaV13.getString("v46");
                    objectSetSelectSinyalOutputDeltaV13[35] = resultSetSelectSinyalOutputDeltaV13.getString("v56");
                    objectSetSelectSinyalOutputDeltaV13[36] = resultSetSelectSinyalOutputDeltaV13.getString("v66");
                    objectSetSelectSinyalOutputDeltaV13[37] = resultSetSelectSinyalOutputDeltaV13.getString("iterasi_ke");

                    tbl13.addRow(objectSetSelectSinyalOutputDeltaV13);
                }
            }
        }
    }

    private void aktivasiTable9NilaiBiasAwal() {
        tbl9NilaiBiasAwal = new DefaultTableModel();
        Tbl9NilaiBiasAwal.setModel(tbl9NilaiBiasAwal);
        tbl9NilaiBiasAwal.addColumn("data ke");
        tbl9NilaiBiasAwal.addColumn("v10");
        tbl9NilaiBiasAwal.addColumn("v20");
        tbl9NilaiBiasAwal.addColumn("v30");
        tbl9NilaiBiasAwal.addColumn("v40");
        tbl9NilaiBiasAwal.addColumn("v50");
        tbl9NilaiBiasAwal.addColumn("v60");
        tbl9NilaiBiasAwal.addColumn("iterasi ke");

    }

    private void tampilkanTable9NilaiBiasAwal() throws SQLException {
        String sqlDokMax = "SELECT MAX(dokumen_ke) AS dok_max FROM tb_13";
        Statement statementDokMax = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetDokMax = statementDokMax.executeQuery(sqlDokMax);
        while (resultSetDokMax.next()) {

            String sqlIterMax = "SELECT MAX(iterasi_ke) AS iter_max FROM tb_13";
            Statement statementIterMax = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetIterMax = statementIterMax.executeQuery(sqlIterMax);
            while (resultSetIterMax.next()) {

                String sqlSelectSinyalOutputSegitigaBias = "SELECT * FROM tb_9_nilai_bias_awal WHERE iterasi_ke = " + resultSetIterMax.getString("iter_max") + " AND dokumen_ke = " + resultSetDokMax.getString("dok_max");

                Statement statementSelectSinyalOutputSegitigaBias = (Statement) jdbc.getConnection().createStatement();
                ResultSet resultSetSelectSinyalOutputSegitigaBias = statementSelectSinyalOutputSegitigaBias.executeQuery(sqlSelectSinyalOutputSegitigaBias);

                while (resultSetSelectSinyalOutputSegitigaBias.next()) {
                    Object[] objectSetSelectSinyalOutputSegitigaBias = new Object[8];
                    objectSetSelectSinyalOutputSegitigaBias[0] = resultSetSelectSinyalOutputSegitigaBias.getString("dokumen_ke");
                    objectSetSelectSinyalOutputSegitigaBias[1] = resultSetSelectSinyalOutputSegitigaBias.getString("deltav10");
                    objectSetSelectSinyalOutputSegitigaBias[2] = resultSetSelectSinyalOutputSegitigaBias.getString("deltav20");
                    objectSetSelectSinyalOutputSegitigaBias[3] = resultSetSelectSinyalOutputSegitigaBias.getString("deltav30");
                    objectSetSelectSinyalOutputSegitigaBias[4] = resultSetSelectSinyalOutputSegitigaBias.getString("deltav40");
                    objectSetSelectSinyalOutputSegitigaBias[5] = resultSetSelectSinyalOutputSegitigaBias.getString("deltav50");
                    objectSetSelectSinyalOutputSegitigaBias[6] = resultSetSelectSinyalOutputSegitigaBias.getString("deltav60");
                    objectSetSelectSinyalOutputSegitigaBias[7] = resultSetSelectSinyalOutputSegitigaBias.getString("iterasi_ke");
                    tbl9NilaiBiasAwal.addRow(objectSetSelectSinyalOutputSegitigaBias);
                }
            }
        }
    }

    private void aktivasiTableW() {
        tblW10 = new DefaultTableModel();
        TblW10.setModel(tblW10);
        tblW10.addColumn("data_ke");
        tblW10.addColumn("W10");
        tblW10.addColumn("W11");
        tblW10.addColumn("W12");
        tblW10.addColumn("W13");
        tblW10.addColumn("W14");
        tblW10.addColumn("W15");
        tblW10.addColumn("W16");
        tblW10.addColumn("iterasi ke");

    }

    private void tampilkanTableW() throws SQLException {
        String sqlDokMax = "SELECT MAX(dokumen_ke) AS dok_max FROM tb_13";
        Statement statementDokMax = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetDokMax = statementDokMax.executeQuery(sqlDokMax);
        while (resultSetDokMax.next()) {

            String sqlIterMax = "SELECT MAX(iterasi_ke) AS iter_max FROM tb_13";
            Statement statementIterMax = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetIterMax = statementIterMax.executeQuery(sqlIterMax);
            while (resultSetIterMax.next()) {

                String sqlSelectSinyalOutput = "SELECT * FROM tb_w WHERE iterasi_ke = " + resultSetIterMax.getString("iter_max") + " AND dokumen_ke = " + resultSetDokMax.getString("dok_max");

                Statement statementSelectSinyalOutput = (Statement) jdbc.getConnection().createStatement();
                ResultSet resultSetSelectSinyalOutput = statementSelectSinyalOutput.executeQuery(sqlSelectSinyalOutput);

                while (resultSetSelectSinyalOutput.next()) {
                    Object[] objectSetSelectSinyalOutput = new Object[9];
                    objectSetSelectSinyalOutput[0] = resultSetSelectSinyalOutput.getString("dokumen_ke");
                    objectSetSelectSinyalOutput[1] = resultSetSelectSinyalOutput.getString("w10");
                    objectSetSelectSinyalOutput[2] = resultSetSelectSinyalOutput.getString("w11");
                    objectSetSelectSinyalOutput[3] = resultSetSelectSinyalOutput.getString("w12");
                    objectSetSelectSinyalOutput[4] = resultSetSelectSinyalOutput.getString("w13");
                    objectSetSelectSinyalOutput[5] = resultSetSelectSinyalOutput.getString("w14");
                    objectSetSelectSinyalOutput[6] = resultSetSelectSinyalOutput.getString("w15");
                    objectSetSelectSinyalOutput[7] = resultSetSelectSinyalOutput.getString("w16");
                    objectSetSelectSinyalOutput[8] = resultSetSelectSinyalOutput.getString("iterasi_ke");

                    tblW10.addRow(objectSetSelectSinyalOutput);
                }
            }
        }
    }

    private void FeedForwardConfig() {
        tblFeedforward = new DefaultTableModel();
        TblFeedforward.setModel(tblFeedforward);
        tblFeedforward.addColumn("data_ke");
        tblFeedforward.addColumn("z_net1");
        tblFeedforward.addColumn("z_net2");
        tblFeedforward.addColumn("z_net3");
        tblFeedforward.addColumn("z_net4");
        tblFeedforward.addColumn("z_net5");
        tblFeedforward.addColumn("z_net6");
        tblFeedforward.addColumn("iterasi-ke");
    }

    private void hiddenLayerConfig() {
        tblHiddenLayer = new DefaultTableModel();
        TblHiddenLayer.setModel(tblHiddenLayer);
        tblHiddenLayer.addColumn("data_ke");
        tblHiddenLayer.addColumn("z1");
        tblHiddenLayer.addColumn("z2");
        tblHiddenLayer.addColumn("z3");
        tblHiddenLayer.addColumn("z4");
        tblHiddenLayer.addColumn("z5");
        tblHiddenLayer.addColumn("z6");
        tblHiddenLayer.addColumn("iterasi-ke");
    }

    private void sinyalTableConfig() {
        tblSinyal = new DefaultTableModel();
        TblSinyal.setModel(tblSinyal);
        tblSinyal.addColumn("wkj");
        tblSinyal.addColumn("y_net1");
        tblSinyal.addColumn("iterasi_ke");
    }

    private void sinyalOutputTableConfig() {
        tblSinyalOutput = new DefaultTableModel();
        TblSinyalOutput.setModel(tblSinyalOutput);
        tblSinyalOutput.addColumn("wkj");
        tblSinyalOutput.addColumn("yk");
        tblSinyalOutput.addColumn("iterasi_ke");
    }

    private void sinyalOutputTableConfig1() {
        tblSinyalOutput1 = new DefaultTableModel();
        TblSinyalOutput1.setModel(tblSinyalOutput1);
        tblSinyalOutput1.addColumn("wkj");
        tblSinyalOutput1.addColumn("yk");
        tblSinyalOutput1.addColumn("iterasi_ke");
        tblSinyalOutput1.addColumn("dibulatkan");
        tblSinyalOutput1.addColumn("kelas");
        tblSinyalOutput1.addColumn("hasil seharusnya");
    }

    private void langkahSatu() throws SQLException {
        try {
            String sqlTruncateBobot = "TRUNCATE tb_feedforward_uji";
            Statement statementTruncateBobot = (Statement) jdbc.getConnection().createStatement();
            statementTruncateBobot.executeUpdate(sqlTruncateBobot);

        } catch (SQLException ex) {
            Logger.getLogger(AcakBobot.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 1; i <= 1; i++) {

            String sqlSelectSinyalOutputSegitigaBias = "SELECT * FROM tb_9_nilai_bias_awal,tb_normalisasi,tb_13 "
                    + "where tb_9_nilai_bias_awal.data_ke = tb_normalisasi.id "
                    + "and"
                    + " tb_13.data_ke = tb_9_nilai_bias_awal.data_ke";
            Statement statementSelectSinyalOutputSegitigaBias = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetSelectSinyalOutputSegitigaBias = statementSelectSinyalOutputSegitigaBias.executeQuery(sqlSelectSinyalOutputSegitigaBias);

            System.out.println(sqlSelectSinyalOutputSegitigaBias);

            double z_net1, z_net2, z_net3, z_net4, z_net5, z_net6;

            while (resultSetSelectSinyalOutputSegitigaBias.next()) {
                Object[] objectSetSelectSinyalOutputSegitigaBias = new Object[8];

                //=CZ64+(B65*DG64)+(C65*DM64)+(D65*DS64)+(E65*DY64)+(F65*EE64)+(G65*EK64)
                z_net1 = Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("deltav10"))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v11")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v12")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v13")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v14")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v15")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v16")));

                z_net2 = Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("deltav20"))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v21")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v22")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v23")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v24")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v25")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v26")));

                z_net3 = Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("deltav30"))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v31")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v32")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v33")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v34")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v35")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v36")));

                z_net4 = Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("deltav40"))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v41")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v42")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v43")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v44")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v45")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v46")));

                z_net5 = Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("deltav50"))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v51")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v52")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v53")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v54")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v55")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v56")));

                z_net6 = Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("deltav60"))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v61")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v62")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksplus")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v63")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kbmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v64")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("kkmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v65")))
                        + (Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("ksmin")) * Double.parseDouble(resultSetSelectSinyalOutputSegitigaBias.getString("v66")));

                String sqlInsertBobotAcak = "INSERT INTO `tb_feedforward_uji` (`data_ke`, `z_net1`, `z_net2`, `z_net3`, `z_net4`, `z_net5`, `z_net6`, `dokumen_ke`, `iterasi_ke`) VALUES\n"
                        + "(NULL,"
                        + "'" + z_net1 + "',"
                        + "'" + z_net2 + "',"
                        + "'" + z_net3 + "',"
                        + "'" + z_net4 + "',"
                        + "'" + z_net5 + "',"
                        + "'" + z_net6 + "',"
                        + "" + resultSetSelectSinyalOutputSegitigaBias.getString("data_ke") + ","
                        + "" + i + ")";
                System.out.println(sqlInsertBobotAcak);
                Statement statementInsertBobotAcak = (Statement) jdbc.getConnection().createStatement();
                statementInsertBobotAcak.executeUpdate(sqlInsertBobotAcak);

                objectSetSelectSinyalOutputSegitigaBias[0] = resultSetSelectSinyalOutputSegitigaBias.getString("data_ke");
                objectSetSelectSinyalOutputSegitigaBias[1] = z_net1;
                objectSetSelectSinyalOutputSegitigaBias[2] = z_net2;
                objectSetSelectSinyalOutputSegitigaBias[3] = z_net3;
                objectSetSelectSinyalOutputSegitigaBias[4] = z_net4;
                objectSetSelectSinyalOutputSegitigaBias[5] = z_net5;
                objectSetSelectSinyalOutputSegitigaBias[6] = z_net6;
                objectSetSelectSinyalOutputSegitigaBias[7] = i;

                tblFeedforward.addRow(objectSetSelectSinyalOutputSegitigaBias);
            }
        }
    }

    private void langkahDua() throws SQLException {
        String TruncateFeedForward = "TRUNCATE tb_feedforward_uji";
        Statement statementTruncateFeedForward = (Statement) jdbc.getConnection().createStatement();
        statementTruncateFeedForward.executeUpdate(TruncateFeedForward);

        try {
            String sqlTruncateAcak = "TRUNCATE tb_hidden_layer_uji";
            Statement statementTruncateAcak = (Statement) jdbc.getConnection().createStatement();
            statementTruncateAcak.executeUpdate(sqlTruncateAcak);
        } catch (SQLException ex) {
            Logger.getLogger(AcakBobot.class.getName()).log(Level.SEVERE, null, ex);
        }

        List<Integer> inputDokumen = new ArrayList<Integer>();
        List<Double> inputSatu = new ArrayList<Double>();
        List<Double> inputDua = new ArrayList<Double>();
        List<Double> inputTiga = new ArrayList<Double>();
        List<Double> inputEmpat = new ArrayList<Double>();
        List<Double> inputLima = new ArrayList<Double>();
        List<Double> inputEnam = new ArrayList<Double>();

        List<Double> bobotBaruSatu = new ArrayList<Double>();
        List<Double> bobotBaruDua = new ArrayList<Double>();
        List<Double> bobotBaruTiga = new ArrayList<Double>();
        List<Double> bobotBaruEmpat = new ArrayList<Double>();
        List<Double> bobotBaruLima = new ArrayList<Double>();
        List<Double> bobotBaruEnam = new ArrayList<Double>();

        String sqlSelectBiasTable = "SELECT * FROM tb_nilai_bias_awal";
        Statement statementSelectBiasTable = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectBiasTable = statementSelectBiasTable.executeQuery(sqlSelectBiasTable);
        while (resultSetSelectBiasTable.next()) {
            Object[] objectSelectBiasTable = new Object[6];
            objectSelectBiasTable[0] = resultSetSelectBiasTable.getString("j1");
            objectSelectBiasTable[1] = resultSetSelectBiasTable.getString("j2");
            objectSelectBiasTable[2] = resultSetSelectBiasTable.getString("j3");
            objectSelectBiasTable[3] = resultSetSelectBiasTable.getString("j4");
            objectSelectBiasTable[4] = resultSetSelectBiasTable.getString("j5");
            objectSelectBiasTable[5] = resultSetSelectBiasTable.getString("j6");

            String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_normalisasi_uji, tb_filtering_uji WHERE tb_normalisasi_uji.id = tb_filtering_uji.id_filtering ";
            Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

            String sqlPanjangVector = "SELECT * FROM tb_bobot";
            Statement statementPanjangVector = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetPanjangVector = statementPanjangVector.executeQuery(sqlPanjangVector);

            float j1, j2, j3, j4, j5, j6;
            float jumlahJ1 = 0, jumlahJ2 = 0, jumlahJ3 = 0, jumlahJ4 = 0, jumlahJ5 = 0, jumlahJ6 = 0;

            while (resultSetPanjangVector.next()) {
                j1 = Float.parseFloat(resultSetPanjangVector.getString("j1"));
                j2 = Float.parseFloat(resultSetPanjangVector.getString("j2"));
                j3 = Float.parseFloat(resultSetPanjangVector.getString("j3"));
                j4 = Float.parseFloat(resultSetPanjangVector.getString("j4"));
                j5 = Float.parseFloat(resultSetPanjangVector.getString("j5"));
                j6 = Float.parseFloat(resultSetPanjangVector.getString("j6"));

                jumlahJ1 = (float) (jumlahJ1 + Math.pow(j1, 2));
                jumlahJ2 = (float) (jumlahJ2 + Math.pow(j2, 2));
                jumlahJ3 = (float) (jumlahJ3 + Math.pow(j3, 2));
                jumlahJ4 = (float) (jumlahJ4 + Math.pow(j4, 2));
                jumlahJ5 = (float) (jumlahJ5 + Math.pow(j5, 2));
                jumlahJ6 = (float) (jumlahJ6 + Math.pow(j6, 2));

            }

            double hasilJ1 = Math.sqrt(jumlahJ1);
            double hasilJ2 = Math.sqrt(jumlahJ2);
            double hasilJ3 = Math.sqrt(jumlahJ3);
            double hasilJ4 = Math.sqrt(jumlahJ4);
            double hasilJ5 = Math.sqrt(jumlahJ5);
            double hasilJ6 = Math.sqrt(jumlahJ6);

            float pangkat, bil1, bil2;
            bil1 = 1;
            bil2 = 6;
            pangkat = bil1 / bil2;
            float faktorSkala = (float) Math.pow((Math.abs(6)), pangkat);
            float faktorSkalaDua = (float) (0.7 * faktorSkala);

            int i = 1;

            String sqlBobotBaru = "SELECT * FROM tb_bobot";
            Statement statementBobotBaru = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetBobotBaru = statementBobotBaru.executeQuery(sqlBobotBaru);

            while (resultSetBobotBaru.next()) {
                i = Integer.parseInt(resultSetBobotBaru.getString("i"));
                j1 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j1")) / hasilJ1));
                j2 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j2")) / hasilJ2));
                j3 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j3")) / hasilJ3));
                j4 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j4")) / hasilJ4));
                j5 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j5")) / hasilJ5));
                j6 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j6")) / hasilJ6));

                //System.out.println(j1);
                Object[] objectHasilBobot = new Object[7];

                objectHasilBobot[0] = i;
                objectHasilBobot[1] = j1;
                objectHasilBobot[2] = j2;
                objectHasilBobot[3] = j3;
                objectHasilBobot[4] = j4;
                objectHasilBobot[5] = j5;
                objectHasilBobot[6] = j6;

                bobotBaruSatu.add(Double.parseDouble(objectHasilBobot[1].toString()));
                bobotBaruDua.add(Double.parseDouble(objectHasilBobot[2].toString()));
                bobotBaruTiga.add(Double.parseDouble(objectHasilBobot[3].toString()));
                bobotBaruEmpat.add(Double.parseDouble(objectHasilBobot[4].toString()));
                bobotBaruLima.add(Double.parseDouble(objectHasilBobot[5].toString()));
                bobotBaruEnam.add(Double.parseDouble(objectHasilBobot[6].toString()));

            }

            while (rsNormalisasiHasil.next()) {
                Object[] oNormalisasiHasil = new Object[8];
                oNormalisasiHasil[0] = rsNormalisasiHasil.getString("id");
                oNormalisasiHasil[1] = rsNormalisasiHasil.getString("deskripsi_filtering");
                oNormalisasiHasil[2] = rsNormalisasiHasil.getString("kbplus");
                oNormalisasiHasil[3] = rsNormalisasiHasil.getString("kkplus");
                oNormalisasiHasil[4] = rsNormalisasiHasil.getString("ksplus");
                oNormalisasiHasil[5] = rsNormalisasiHasil.getString("kbmin");
                oNormalisasiHasil[6] = rsNormalisasiHasil.getString("kkmin");
                oNormalisasiHasil[7] = rsNormalisasiHasil.getString("ksmin");

                inputDokumen.add(Integer.parseInt(oNormalisasiHasil[0].toString()));
                inputSatu.add(Double.parseDouble(oNormalisasiHasil[2].toString()));
                inputDua.add(Double.parseDouble(oNormalisasiHasil[3].toString()));
                inputTiga.add(Double.parseDouble(oNormalisasiHasil[4].toString()));
                inputEmpat.add(Double.parseDouble(oNormalisasiHasil[5].toString()));
                inputLima.add(Double.parseDouble(oNormalisasiHasil[6].toString()));
                inputEnam.add(Double.parseDouble(oNormalisasiHasil[7].toString()));

            }

            double feedForwardSatu, feedForwardDua, feedForwardTiga, feedForwardEmpat, feedForwardLima, feedForwardEnam;
            double hiddenLayerSatu, hiddenLayerDua, hiddenLayerTiga, hiddenLayerEmpat, hiddenLayerLima, hiddenLayerEnam;

            int max;

            for (int iterasi = 1; iterasi <= 1; iterasi++) {
                //harusnya berisi jumlah dokumen bukannya 3
                for (max = 0; max <= 3; max++) {
                    feedForwardSatu = (Double.parseDouble(objectSelectBiasTable[0].toString()))
                            + ((Double.parseDouble(inputSatu.get(max).toString())) * (Double.parseDouble(bobotBaruSatu.get(0).toString())))
                            + ((Double.parseDouble(inputDua.get(max).toString())) * (Double.parseDouble(bobotBaruSatu.get(1).toString())))
                            + ((Double.parseDouble(inputTiga.get(max).toString())) * (Double.parseDouble(bobotBaruSatu.get(2).toString())))
                            + ((Double.parseDouble(inputEmpat.get(max).toString())) * (Double.parseDouble(bobotBaruSatu.get(3).toString())))
                            + ((Double.parseDouble(inputLima.get(max).toString())) * (Double.parseDouble(bobotBaruSatu.get(4).toString())))
                            + ((Double.parseDouble(inputEnam.get(max).toString())) * (Double.parseDouble(bobotBaruSatu.get(5).toString())));
                    System.out.println(feedForwardSatu);
                    hiddenLayerSatu = 1 / (1 + Math.exp(-feedForwardSatu));

                    feedForwardDua = (Double.parseDouble(objectSelectBiasTable[1].toString()))
                            + ((Double.parseDouble(inputSatu.get(max).toString())) * (Double.parseDouble(bobotBaruDua.get(0).toString())))
                            + ((Double.parseDouble(inputDua.get(max).toString())) * (Double.parseDouble(bobotBaruDua.get(1).toString())))
                            + ((Double.parseDouble(inputTiga.get(max).toString())) * (Double.parseDouble(bobotBaruDua.get(2).toString())))
                            + ((Double.parseDouble(inputEmpat.get(max).toString())) * (Double.parseDouble(bobotBaruDua.get(3).toString())))
                            + ((Double.parseDouble(inputLima.get(max).toString())) * (Double.parseDouble(bobotBaruDua.get(4).toString())))
                            + ((Double.parseDouble(inputEnam.get(max).toString())) * (Double.parseDouble(bobotBaruDua.get(5).toString())));
                    System.out.println(feedForwardDua);
                    hiddenLayerDua = 1 / (1 + Math.exp(-feedForwardDua));

                    feedForwardTiga = (Double.parseDouble(objectSelectBiasTable[2].toString()))
                            + ((Double.parseDouble(inputSatu.get(max).toString())) * (Double.parseDouble(bobotBaruTiga.get(0).toString())))
                            + ((Double.parseDouble(inputDua.get(max).toString())) * (Double.parseDouble(bobotBaruTiga.get(1).toString())))
                            + ((Double.parseDouble(inputTiga.get(max).toString())) * (Double.parseDouble(bobotBaruTiga.get(2).toString())))
                            + ((Double.parseDouble(inputEmpat.get(max).toString())) * (Double.parseDouble(bobotBaruTiga.get(3).toString())))
                            + ((Double.parseDouble(inputLima.get(max).toString())) * (Double.parseDouble(bobotBaruTiga.get(4).toString())))
                            + ((Double.parseDouble(inputEnam.get(max).toString())) * (Double.parseDouble(bobotBaruTiga.get(5).toString())));
                    System.out.println(feedForwardTiga);
                    hiddenLayerTiga = 1 / (1 + Math.exp(-feedForwardTiga));

                    feedForwardEmpat = (Double.parseDouble(objectSelectBiasTable[3].toString()))
                            + ((Double.parseDouble(inputSatu.get(max).toString())) * (Double.parseDouble(bobotBaruEmpat.get(0).toString())))
                            + ((Double.parseDouble(inputDua.get(max).toString())) * (Double.parseDouble(bobotBaruEmpat.get(1).toString())))
                            + ((Double.parseDouble(inputTiga.get(max).toString())) * (Double.parseDouble(bobotBaruEmpat.get(2).toString())))
                            + ((Double.parseDouble(inputEmpat.get(max).toString())) * (Double.parseDouble(bobotBaruEmpat.get(3).toString())))
                            + ((Double.parseDouble(inputLima.get(max).toString())) * (Double.parseDouble(bobotBaruEmpat.get(4).toString())))
                            + ((Double.parseDouble(inputEnam.get(max).toString())) * (Double.parseDouble(bobotBaruEmpat.get(5).toString())));
                    System.out.println(feedForwardEmpat);
                    hiddenLayerEmpat = 1 / (1 + Math.exp(-feedForwardEmpat));

                    feedForwardLima = (Double.parseDouble(objectSelectBiasTable[4].toString()))
                            + ((Double.parseDouble(inputSatu.get(max).toString())) * (Double.parseDouble(bobotBaruLima.get(0).toString())))
                            + ((Double.parseDouble(inputDua.get(max).toString())) * (Double.parseDouble(bobotBaruLima.get(1).toString())))
                            + ((Double.parseDouble(inputTiga.get(max).toString())) * (Double.parseDouble(bobotBaruLima.get(2).toString())))
                            + ((Double.parseDouble(inputEmpat.get(max).toString())) * (Double.parseDouble(bobotBaruLima.get(3).toString())))
                            + ((Double.parseDouble(inputLima.get(max).toString())) * (Double.parseDouble(bobotBaruLima.get(4).toString())))
                            + ((Double.parseDouble(inputEnam.get(max).toString())) * (Double.parseDouble(bobotBaruLima.get(5).toString())));
                    System.out.println(feedForwardLima);
                    hiddenLayerLima = 1 / (1 + Math.exp(-feedForwardLima));

                    feedForwardEnam = (Double.parseDouble(objectSelectBiasTable[5].toString()))
                            + ((Double.parseDouble(inputSatu.get(max).toString())) * (Double.parseDouble(bobotBaruEnam.get(0).toString())))
                            + ((Double.parseDouble(inputDua.get(max).toString())) * (Double.parseDouble(bobotBaruEnam.get(1).toString())))
                            + ((Double.parseDouble(inputTiga.get(max).toString())) * (Double.parseDouble(bobotBaruEnam.get(2).toString())))
                            + ((Double.parseDouble(inputEmpat.get(max).toString())) * (Double.parseDouble(bobotBaruEnam.get(3).toString())))
                            + ((Double.parseDouble(inputLima.get(max).toString())) * (Double.parseDouble(bobotBaruEnam.get(4).toString())))
                            + ((Double.parseDouble(inputEnam.get(max).toString())) * (Double.parseDouble(bobotBaruEnam.get(5).toString())));
                    System.out.println(feedForwardEnam);
                    hiddenLayerEnam = 1 / (1 + Math.exp(-feedForwardEnam));

                    String sqlInsertFeedForward = "INSERT INTO `tb_feedforward_uji` (`data_ke`, `z_net1`, `z_net2`, `z_net3`, `z_net4`, `z_net5`, `z_net6`, `dokumen_ke`, `iterasi_ke`) VALUES\n"
                            + "(null,"
                            + "'" + feedForwardSatu + "',"
                            + "'" + feedForwardDua + "',"
                            + "'" + feedForwardTiga + "',"
                            + "'" + feedForwardEmpat + "',"
                            + "'" + feedForwardLima + "',"
                            + "'" + feedForwardEnam + "',"
                            + "" + Integer.parseInt(inputDokumen.get(max).toString()) + ","
                            + "" + iterasi + ")";
                    //System.out.println(sqlInsertFeedForward);
                    Statement statementInsertFeedForward = (Statement) jdbc.getConnection().createStatement();
                    statementInsertFeedForward.executeUpdate(sqlInsertFeedForward);

                    String sqlInsertHiddenLayer = "INSERT INTO `tb_hidden_layer_uji` (`data_ke`, `z_net1`, `z_net2`, `z_net3`, `z_net4`, `z_net5`, `z_net6`, `dokumen_ke`, iterasi) VALUES\n"
                            + "(null,"
                            + "'" + hiddenLayerSatu + "',"
                            + "'" + hiddenLayerDua + "',"
                            + "'" + hiddenLayerTiga + "',"
                            + "'" + hiddenLayerEmpat + "',"
                            + "'" + hiddenLayerLima + "',"
                            + "'" + hiddenLayerEnam + "',"
                            + "" + Integer.parseInt(inputDokumen.get(max).toString()) + ","
                            + "" + iterasi + ")";
                    //System.out.println(sqlInsertFeedForward);
                    Statement statementInsertHiddenLayer = (Statement) jdbc.getConnection().createStatement();
                    statementInsertHiddenLayer.executeUpdate(sqlInsertHiddenLayer);

                }
            }

        }

    }

    private void tampilkanSatu() throws SQLException {
        tblFeedforward.getDataVector().removeAllElements();
        tblFeedforward.fireTableDataChanged();

        String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_feedforward_uji ";
        Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

        //NumberFormat formatter = new DecimalFormat("##.##");
        while (rsNormalisasiHasil.next()) {
            Object[] oNormalisasiHasil = new Object[8];

            //System.out.println(Double.valueOf(formatter.format(rsNormalisasiHasil.getDouble("z_net1")).toString()));
            oNormalisasiHasil[0] = rsNormalisasiHasil.getString("data_ke");
            oNormalisasiHasil[1] = rsNormalisasiHasil.getString("z_net1");
            oNormalisasiHasil[2] = rsNormalisasiHasil.getString("z_net2");
            oNormalisasiHasil[3] = rsNormalisasiHasil.getString("z_net3");
            oNormalisasiHasil[4] = rsNormalisasiHasil.getString("z_net4");
            oNormalisasiHasil[5] = rsNormalisasiHasil.getString("z_net5");
            oNormalisasiHasil[6] = rsNormalisasiHasil.getString("z_net6");
            oNormalisasiHasil[7] = rsNormalisasiHasil.getString("iterasi_ke");

            tblFeedforward.addRow(oNormalisasiHasil);
        }
    }

    private void tampilkanDua() throws SQLException {

        tblHiddenLayer.getDataVector().removeAllElements();
        tblHiddenLayer.fireTableDataChanged();

        String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_hidden_layer_uji";
        Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

        while (rsNormalisasiHasil.next()) {
            Object[] oNormalisasiHasil = new Object[8];
            oNormalisasiHasil[0] = rsNormalisasiHasil.getString("dokumen_ke");
            oNormalisasiHasil[1] = rsNormalisasiHasil.getString("z_net1");
            oNormalisasiHasil[2] = rsNormalisasiHasil.getString("z_net2");
            oNormalisasiHasil[3] = rsNormalisasiHasil.getString("z_net3");
            oNormalisasiHasil[4] = rsNormalisasiHasil.getString("z_net4");
            oNormalisasiHasil[5] = rsNormalisasiHasil.getString("z_net5");
            oNormalisasiHasil[6] = rsNormalisasiHasil.getString("z_net6");
            oNormalisasiHasil[7] = rsNormalisasiHasil.getString("iterasi");

            tblHiddenLayer.addRow(oNormalisasiHasil);
        }
    }

    private void tampilkanTiga() throws SQLException {
        tblSinyal.getDataVector().removeAllElements();
        tblSinyal.fireTableDataChanged();

        String sqlSelectSinyal = "SELECT * FROM tb_sinyal_uji";
        Statement statementSelectSinyal = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectSinyal = statementSelectSinyal.executeQuery(sqlSelectSinyal);

        while (resultSetSelectSinyal.next()) {
            Object[] objectSetSelectSinyal = new Object[3];
            objectSetSelectSinyal[0] = resultSetSelectSinyal.getString("dokumen_ke");
            objectSetSelectSinyal[1] = resultSetSelectSinyal.getString("k");
            objectSetSelectSinyal[2] = resultSetSelectSinyal.getString("iterasi_ke");

            tblSinyal.addRow(objectSetSelectSinyal);
        }
    }

    private void tampilkanEmpat() throws SQLException {
        tblSinyalOutput.getDataVector().removeAllElements();
        tblSinyalOutput.fireTableDataChanged();

        String sqlSelectSinyalOutput = "SELECT * FROM tb_sinyal_aktivasi_uji";
        Statement statementSelectSinyalOutput = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectSinyalOutput = statementSelectSinyalOutput.executeQuery(sqlSelectSinyalOutput);

        while (resultSetSelectSinyalOutput.next()) {
            Object[] objectSetSelectSinyalOutput = new Object[3];
            objectSetSelectSinyalOutput[0] = resultSetSelectSinyalOutput.getString("dokumen_ke");
            objectSetSelectSinyalOutput[1] = resultSetSelectSinyalOutput.getString("k");
            objectSetSelectSinyalOutput[2] = resultSetSelectSinyalOutput.getString("iterasi_ke");

            tblSinyalOutput.addRow(objectSetSelectSinyalOutput);
        }
    }

    private void tampilkanLima() throws SQLException {
        tblSinyalOutput1.getDataVector().removeAllElements();
        tblSinyalOutput1.fireTableDataChanged();

        String sqlSelectSinyalOutput = "SELECT * FROM tb_sinyal_aktivasi_uji_hasil, tb_dokumen_uji WHERE tb_sinyal_aktivasi_uji_hasil.dokumen_ke = tb_dokumen_uji.id_dokumen";
        Statement statementSelectSinyalOutput = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectSinyalOutput = statementSelectSinyalOutput.executeQuery(sqlSelectSinyalOutput);

        while (resultSetSelectSinyalOutput.next()) {
            int hasil;
            String kelas;

            if (Double.parseDouble(resultSetSelectSinyalOutput.getString("k").toString()) >= 0) {
                hasil = 1;
                kelas = "positif";
            } else {
                hasil = -1;
                kelas = "negatif";
            }

            Object[] objectSetSelectSinyalOutput = new Object[6];
            objectSetSelectSinyalOutput[0] = resultSetSelectSinyalOutput.getString("dokumen_ke");
            objectSetSelectSinyalOutput[1] = resultSetSelectSinyalOutput.getString("k");
            objectSetSelectSinyalOutput[2] = resultSetSelectSinyalOutput.getString("iterasi_ke");
            objectSetSelectSinyalOutput[3] = hasil;
            objectSetSelectSinyalOutput[4] = kelas;
            objectSetSelectSinyalOutput[5] = resultSetSelectSinyalOutput.getString("kelas_dokumen");

            tblSinyalOutput1.addRow(objectSetSelectSinyalOutput);
        }
    }

    private void langkahKetiga() throws SQLException {
        double sinyal, sinyalDua, acak = 0;

        List<Integer> hiddenDokumen = new ArrayList<Integer>();
        List<Double> hiddenSatu = new ArrayList<Double>();
        List<Double> hiddenDua = new ArrayList<Double>();
        List<Double> hiddenTiga = new ArrayList<Double>();
        List<Double> hiddenEmpat = new ArrayList<Double>();
        List<Double> hiddenLima = new ArrayList<Double>();
        List<Double> hiddenEnam = new ArrayList<Double>();

        List<Double> acakSatu = new ArrayList<Double>();

        String sqlTruncateSinyal = "TRUNCATE tb_sinyal_uji";
        Statement statementTruncateSinyal = (Statement) jdbc.getConnection().createStatement();
        statementTruncateSinyal.executeUpdate(sqlTruncateSinyal);

        String sqlTruncateSinyalAktivasi = "TRUNCATE tb_sinyal_aktivasi_uji";
        Statement statementTruncateSinyalAktivasi = (Statement) jdbc.getConnection().createStatement();
        statementTruncateSinyalAktivasi.executeUpdate(sqlTruncateSinyalAktivasi);

        for (int iterasi = 1; iterasi <= 1; iterasi++) {

            String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_hidden_layer_uji";
            Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
            ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);
            while (rsNormalisasiHasil.next()) {
                Object[] oNormalisasiHasil = new Object[8];
                oNormalisasiHasil[0] = rsNormalisasiHasil.getString("data_ke");
                oNormalisasiHasil[1] = rsNormalisasiHasil.getString("z_net1");
                oNormalisasiHasil[2] = rsNormalisasiHasil.getString("z_net2");
                oNormalisasiHasil[3] = rsNormalisasiHasil.getString("z_net3");
                oNormalisasiHasil[4] = rsNormalisasiHasil.getString("z_net4");
                oNormalisasiHasil[5] = rsNormalisasiHasil.getString("z_net5");
                oNormalisasiHasil[6] = rsNormalisasiHasil.getString("z_net6");

                hiddenDokumen.add(Integer.parseInt(oNormalisasiHasil[0].toString()));
                hiddenSatu.add(Double.parseDouble(oNormalisasiHasil[1].toString()));
                hiddenDua.add(Double.parseDouble(oNormalisasiHasil[2].toString()));
                hiddenTiga.add(Double.parseDouble(oNormalisasiHasil[3].toString()));
                hiddenEmpat.add(Double.parseDouble(oNormalisasiHasil[4].toString()));
                hiddenLima.add(Double.parseDouble(oNormalisasiHasil[5].toString()));
                hiddenEnam.add(Double.parseDouble(oNormalisasiHasil[6].toString()));

                //System.out.println(oNormalisasiHasil[1]);
            }

            String sqlSelectAcakTable = "SELECT * FROM tb_acak";
            Statement statementSelectAcakTable = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetSelectAcakTable = statementSelectAcakTable.executeQuery(sqlSelectAcakTable);
            while (resultSetSelectAcakTable.next()) {
                Object[] objectSelectAcakTable = new Object[2];
                objectSelectAcakTable[0] = resultSetSelectAcakTable.getString("wkj");
                objectSelectAcakTable[1] = resultSetSelectAcakTable.getString("k");

                acakSatu.add(Double.parseDouble(objectSelectAcakTable[1].toString()));

                //System.out.println(objectSelectAcakTable[1]);
            }

            String sqlSelectAcakOutputTable = "SELECT * FROM tb_acak_output";
            Statement statementSelectAcakOutputTable = (Statement) jdbc.getConnection().createStatement();
            ResultSet resultSetSelectAcakOutputTable = statementSelectAcakOutputTable.executeQuery(sqlSelectAcakOutputTable);
            while (resultSetSelectAcakOutputTable.next()) {
                Object[] objectSelectAcakOutputTable = new Object[2];
                objectSelectAcakOutputTable[0] = resultSetSelectAcakOutputTable.getString("wk0");
                objectSelectAcakOutputTable[1] = resultSetSelectAcakOutputTable.getString("k");

                acak = Double.parseDouble(objectSelectAcakOutputTable[1].toString());
            }

            int max;
            //harusnya berisi jumlah dokumenbukannya 3
            for (max = 0; max <= 3; max++) {

                sinyal = acak
                        + ((Double.parseDouble(hiddenSatu.get(max).toString()))
                        * (Double.parseDouble(acakSatu.get(0).toString())))
                        + ((Double.parseDouble(hiddenDua.get(max).toString()))
                        * (Double.parseDouble(acakSatu.get(1).toString())))
                        + ((Double.parseDouble(hiddenTiga.get(max).toString()))
                        * (Double.parseDouble(acakSatu.get(2).toString())))
                        + ((Double.parseDouble(hiddenEmpat.get(max).toString()))
                        * (Double.parseDouble(acakSatu.get(3).toString())))
                        + ((Double.parseDouble(hiddenLima.get(max).toString()))
                        * (Double.parseDouble(acakSatu.get(4).toString())))
                        + ((Double.parseDouble(hiddenEnam.get(max).toString()))
                        * (Double.parseDouble(acakSatu.get(5).toString())));

                System.out.println(acak + " +( " + ((Double.parseDouble(hiddenSatu.get(max).toString())) + " * " + (Double.parseDouble(acakSatu.get(0).toString())) + ") "));
                System.out.println(" + (" + ((Double.parseDouble(hiddenDua.get(max).toString())) + " * " + (Double.parseDouble(acakSatu.get(1).toString())) + ") "));
                System.out.println(" + (" + ((Double.parseDouble(hiddenTiga.get(max).toString())) + " * " + (Double.parseDouble(acakSatu.get(2).toString())) + ") "));
                System.out.println(" + (" + ((Double.parseDouble(hiddenEmpat.get(max).toString())) + " * " + (Double.parseDouble(acakSatu.get(3).toString())) + ") "));
                System.out.println(" + (" + ((Double.parseDouble(hiddenLima.get(max).toString())) + " * " + (Double.parseDouble(acakSatu.get(4).toString())) + ") "));
                System.out.println(" + (" + ((Double.parseDouble(hiddenEnam.get(max).toString())) + " * " + (Double.parseDouble(acakSatu.get(5).toString())) + ") "));
                System.out.println("------------");
                System.out.println(sinyal);
                System.out.println("------------");

                sinyalDua = 1 / (1 + Math.exp(-sinyal));

                System.out.println(sinyalDua);
                System.out.println("------------");
                System.out.println(" ");

                String sqlInsertSinyal = "INSERT INTO `tb_sinyal_uji` (`wkj`, `k`, `dokumen_ke`, `iterasi_ke`) VALUES\n"
                        + "(null,"
                        + "'" + sinyal + "',"
                        + "" + Integer.parseInt(hiddenDokumen.get(max).toString()) + ","
                        + "" + iterasi + ")";
                //System.out.println(sqlInsertFeedForward);
                Statement statementInsertSinyal = (Statement) jdbc.getConnection().createStatement();
                statementInsertSinyal.executeUpdate(sqlInsertSinyal);

                String sqlInsertSinyalAktivasi = "INSERT INTO `tb_sinyal_aktivasi_uji` (`wkj`, `k`, `dokumen_ke`, `iterasi_ke`) VALUES\n"
                        + "(null,"
                        + "'" + sinyalDua + "',"
                        + "" + Integer.parseInt(hiddenDokumen.get(max).toString()) + ","
                        + "" + iterasi + ")";
                //System.out.println(sqlInsertFeedForward);
                Statement statementInsertSinyalAktivasi = (Statement) jdbc.getConnection().createStatement();
                statementInsertSinyalAktivasi.executeUpdate(sqlInsertSinyalAktivasi);

            }
        }
    }

    private void langkahKelima() throws SQLException {
        String sqlTruncateSinyalAktivasi = "TRUNCATE tb_sinyal_aktivasi_uji_hasil";
        Statement statementTruncateSinyalAktivasi = (Statement) jdbc.getConnection().createStatement();
        statementTruncateSinyalAktivasi.executeUpdate(sqlTruncateSinyalAktivasi);

        String sqlSelectAcakOutputTable = "SELECT * FROM tb_sinyal_aktivasi_uji";
        Statement statementSelectAcakOutputTable = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectAcakOutputTable = statementSelectAcakOutputTable.executeQuery(sqlSelectAcakOutputTable);
        while (resultSetSelectAcakOutputTable.next()) {
            Object[] objectSelectAcakOutputTable = new Object[4];
            objectSelectAcakOutputTable[0] = resultSetSelectAcakOutputTable.getString("wkj");
            objectSelectAcakOutputTable[1] = resultSetSelectAcakOutputTable.getString("k");
            objectSelectAcakOutputTable[2] = resultSetSelectAcakOutputTable.getString("dokumen_ke");
            objectSelectAcakOutputTable[3] = resultSetSelectAcakOutputTable.getString("iterasi_ke");

            Double hasil = (((Double.parseDouble(objectSelectAcakOutputTable[1].toString()) - (0.1)) / 0.8) * (1 - (-1))) + (-1);

            String sqlInsertSinyalAktivasi = "INSERT INTO `tb_sinyal_aktivasi_uji_hasil` (`wkj`, `k`, `dokumen_ke`, `iterasi_ke`) VALUES\n"
                    + "(null,"
                    + "'" + hasil + "',"
                    + "" + Double.parseDouble(objectSelectAcakOutputTable[2].toString()) + ","
                    + "" + Double.parseDouble(objectSelectAcakOutputTable[3].toString()) + ")";
            //System.out.println(sqlInsertFeedForward);
            Statement statementInsertSinyalAktivasi = (Statement) jdbc.getConnection().createStatement();
            statementInsertSinyalAktivasi.executeUpdate(sqlInsertSinyalAktivasi);

        }
    }

    private void tampilkanGabung() throws SQLException {
        tblGabung.getDataVector().removeAllElements();
        tblGabung.fireTableDataChanged();

        String sqlSelectSinyalOutput = "SELECT * FROM tb_sinyal_aktivasi_uji, tb_sinyal_uji WHERE tb_sinyal_aktivasi_uji.dokumen_ke = tb_sinyal_uji.dokumen_ke";
        Statement statementSelectSinyalOutput = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectSinyalOutput = statementSelectSinyalOutput.executeQuery(sqlSelectSinyalOutput);

        while (resultSetSelectSinyalOutput.next()) {
            Object[] objectSetSelectSinyalOutput = new Object[6];
            objectSetSelectSinyalOutput[0] = resultSetSelectSinyalOutput.getString("dokumen_ke");
            objectSetSelectSinyalOutput[1] = resultSetSelectSinyalOutput.getString("tb_sinyal_uji.k");
            objectSetSelectSinyalOutput[2] = resultSetSelectSinyalOutput.getString("tb_sinyal_aktivasi_uji.k");
            objectSetSelectSinyalOutput[3] = resultSetSelectSinyalOutput.getString("iterasi_ke");

            tblGabung.addRow(objectSetSelectSinyalOutput);
        }
    }

    private void aktivasiGabung() {
        tblGabung = new DefaultTableModel();
        TblGabung.setModel(tblGabung);
        tblGabung.addColumn("wkj");
        tblGabung.addColumn("y_net1");
        tblGabung.addColumn("yk");
        tblGabung.addColumn("iterasi_ke");
    }

}
