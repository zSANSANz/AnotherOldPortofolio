/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package backpropagationradikalmetode;

import backpropagationradikalmetode.utility.jdbc;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andri
 */
public class Pelatihan extends javax.swing.JPanel {

    private static DefaultTableModel tblDokumen;
    private static DefaultTableModel tblNormalisasi;
    private static DefaultTableModel tblBobot;
    private static DefaultTableModel tblVector;
    private static DefaultTableModel tblBobotBaru;
    private static DefaultTableModel tblBias;
    private static DefaultTableModel tblAcak;
    private static DefaultTableModel tblAcakOutput;

    /**
     * Creates new form Pengujian
     */
    public Pelatihan() {
        initComponents();

        TxtIterasi.setText("1");
        TxtLearningRate.setText("0.5");
        
        
        bobotTableConfig();
        vectorTableConfig();
        bobotTableBaruConfig();
        biasTableConfig();
        acakTableConfig();
        acakOutputConfig();

        try {
            bobotTableShow();
            panjangVectorShow();
            biasShow();
            acakShow();
            outputShow();
            termFrekuensi();
        } catch (SQLException ex) {
            Logger.getLogger(Pelatihan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public JTextField getTxtIterasi() {
        return TxtIterasi;
    }

    public void setTxtIterasi(JTextField TxtIterasi) {
        this.TxtIterasi = TxtIterasi;
    }

    public JTextField getTxtLearningRate() {
        return TxtLearningRate;
    }

    public void setTxtLearningRate(JTextField TxtLearningRate) {
        this.TxtLearningRate = TxtLearningRate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        TblBobotBaru = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        TblBobot = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        TblVector = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        TxtLearningRate = new javax.swing.JTextField();
        TxtIterasi = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CmdProses = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        TblBias = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        TblAcak = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        TblAcakOutput = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        TblDokumen = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        TblNormalisasi = new javax.swing.JTable();
        jDesktopPane1 = new javax.swing.JDesktopPane();

        jInternalFrame1.setVisible(true);

        TblBobotBaru.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TblBobotBaru);

        TblBobot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(TblBobot);

        TblVector.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(TblVector);

        jLabel1.setText("Learning Rate :");

        TxtLearningRate.setText(" ");

        TxtIterasi.setText(" ");

        jLabel2.setText("Literasi :");

        CmdProses.setText("Proses Pelatihan");
        CmdProses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmdProsesActionPerformed(evt);
            }
        });

        jLabel4.setText("Bobot");

        jLabel3.setText("Panjang Vector");

        jLabel5.setText("Bobot Baru");

        jLabel6.setText("Nilai Bias Awal");

        TblBias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(TblBias);

        jLabel7.setText("bobot dari hidden layer ke output layer (wkj)");

        TblAcak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(TblAcak);

        jLabel8.setText("inialisasi bias dari hidden layer ke output layer");

        TblAcakOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(TblAcakOutput);

        jLabel9.setText("TERM FREKUENSI");

        TblDokumen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(TblDokumen);

        jLabel10.setText("NORMALISASI TERM FREKUENSI");

        TblNormalisasi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(TblNormalisasi);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1039, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10)
                            .addComponent(jScrollPane9)
                            .addComponent(jScrollPane7)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TxtLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TxtIterasi, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(CmdProses, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(351, 351, 351)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(42, 42, 42))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(51, 51, 51))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel6)
                        .addGap(264, 264, 264)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(159, 159, 159))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(TxtIterasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CmdProses))
                .addGap(34, 34, 34)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 929, Short.MAX_VALUE)
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void CmdProsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmdProsesActionPerformed
        jDesktopPane1.removeAll();
        AcakBobot ab = new AcakBobot(Integer.parseInt(getTxtIterasi().getText().toString()), Double.parseDouble(getTxtLearningRate().getText().toString()));
//        AcakBobot ab = new AcakBobot();
        ab.setBounds(0, 0, jDesktopPane1.getWidth(), jDesktopPane1.getHeight());
        jDesktopPane1.add(ab);
        ab.setVisible(true);
    }//GEN-LAST:event_CmdProsesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CmdProses;
    private javax.swing.JTable TblAcak;
    private javax.swing.JTable TblAcakOutput;
    private javax.swing.JTable TblBias;
    private javax.swing.JTable TblBobot;
    private javax.swing.JTable TblBobotBaru;
    private javax.swing.JTable TblDokumen;
    private javax.swing.JTable TblNormalisasi;
    private javax.swing.JTable TblVector;
    private javax.swing.JTextField TxtIterasi;
    private javax.swing.JTextField TxtLearningRate;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    // End of variables declaration//GEN-END:variables

    private void bobotTableConfig() {
        tblBobot = new DefaultTableModel();
        TblBobot.setModel(tblBobot);
        tblBobot.addColumn("i");
        tblBobot.addColumn("j1");
        tblBobot.addColumn("j2");
        tblBobot.addColumn("j3");
        tblBobot.addColumn("j4");
        tblBobot.addColumn("j5");
        tblBobot.addColumn("j6");
    }

    private void bobotTableShow() throws SQLException {
        tblBobot.getDataVector().removeAllElements();
        tblBobot.fireTableDataChanged();

        String sqlSelectBobotTable = "SELECT * FROM tb_bobot";
        Statement statementSelectBobotTable = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectBobotTable = statementSelectBobotTable.executeQuery(sqlSelectBobotTable);

        while (resultSetSelectBobotTable.next()) {
            Object[] objectSelectBobotTable = new Object[7];
            objectSelectBobotTable[0] = resultSetSelectBobotTable.getString("i");
            objectSelectBobotTable[1] = resultSetSelectBobotTable.getString("j1");
            objectSelectBobotTable[2] = resultSetSelectBobotTable.getString("j2");
            objectSelectBobotTable[3] = resultSetSelectBobotTable.getString("j3");
            objectSelectBobotTable[4] = resultSetSelectBobotTable.getString("j4");
            objectSelectBobotTable[5] = resultSetSelectBobotTable.getString("j5");
            objectSelectBobotTable[6] = resultSetSelectBobotTable.getString("j6");

            tblBobot.addRow(objectSelectBobotTable);
        }
    }

    private void vectorTableConfig() {
        tblVector = new DefaultTableModel();
        TblVector.setModel(tblVector);
        tblVector.addColumn("j1");
        tblVector.addColumn("j2");
        tblVector.addColumn("j3");
        tblVector.addColumn("j4");
        tblVector.addColumn("j5");
        tblVector.addColumn("j6");
    }

    private void bobotTableBaruConfig() {
        tblBobotBaru = new DefaultTableModel();
        TblBobotBaru.setModel(tblBobotBaru);
        tblBobotBaru.addColumn("i");
        tblBobotBaru.addColumn("j1");
        tblBobotBaru.addColumn("j2");
        tblBobotBaru.addColumn("j3");
        tblBobotBaru.addColumn("j4");
        tblBobotBaru.addColumn("j5");
        tblBobotBaru.addColumn("j6");
    }

    private void panjangVectorShow() throws SQLException {
        tblVector.getDataVector().removeAllElements();
        tblVector.fireTableDataChanged();

        tblBobotBaru.getDataVector().removeAllElements();
        tblBobotBaru.fireTableDataChanged();

        String sqlPanjangVector = "SELECT * FROM tb_bobot";
        Statement statementPanjangVector = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetPanjangVector = statementPanjangVector.executeQuery(sqlPanjangVector);

        float j1, j2, j3, j4, j5, j6;
        float jumlahJ1 = 0, jumlahJ2 = 0, jumlahJ3 = 0, jumlahJ4 = 0, jumlahJ5 = 0, jumlahJ6 = 0;

        while (resultSetPanjangVector.next()) {
            j1 = Float.parseFloat(resultSetPanjangVector.getString("j1"));
            j2 = Float.parseFloat(resultSetPanjangVector.getString("j2"));
            j3 = Float.parseFloat(resultSetPanjangVector.getString("j3"));
            j4 = Float.parseFloat(resultSetPanjangVector.getString("j4"));
            j5 = Float.parseFloat(resultSetPanjangVector.getString("j5"));
            j6 = Float.parseFloat(resultSetPanjangVector.getString("j6"));

            jumlahJ1 = (float) (jumlahJ1 + Math.pow(j1, 2));
            jumlahJ2 = (float) (jumlahJ2 + Math.pow(j2, 2));
            jumlahJ3 = (float) (jumlahJ3 + Math.pow(j3, 2));
            jumlahJ4 = (float) (jumlahJ4 + Math.pow(j4, 2));
            jumlahJ5 = (float) (jumlahJ5 + Math.pow(j5, 2));
            jumlahJ6 = (float) (jumlahJ6 + Math.pow(j6, 2));

        }

        double hasilJ1 = Math.sqrt(jumlahJ1);
        double hasilJ2 = Math.sqrt(jumlahJ2);
        double hasilJ3 = Math.sqrt(jumlahJ3);
        double hasilJ4 = Math.sqrt(jumlahJ4);
        double hasilJ5 = Math.sqrt(jumlahJ5);
        double hasilJ6 = Math.sqrt(jumlahJ6);

        float pangkat, bil1, bil2;
        bil1 = 1;
        bil2 = 6;
        pangkat = bil1 / bil2;
        float faktorSkala = (float) Math.pow((Math.abs(6)), pangkat);
        float faktorSkalaDua = (float) (0.7 * faktorSkala);

        int i = 1;

        String sqlBobotBaru = "SELECT * FROM tb_bobot";
        Statement statementBobotBaru = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetBobotBaru = statementBobotBaru.executeQuery(sqlBobotBaru);

        while (resultSetBobotBaru.next()) {
            i = Integer.parseInt(resultSetBobotBaru.getString("i"));
            j1 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j1")) / hasilJ1));
            j2 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j2")) / hasilJ2));
            j3 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j3")) / hasilJ3));
            j4 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j4")) / hasilJ4));
            j5 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j5")) / hasilJ5));
            j6 = (float) ((faktorSkalaDua * Float.parseFloat(resultSetBobotBaru.getString("j6")) / hasilJ6));

            //System.out.println(j1);
            Object[] objectHasilBobot = new Object[7];
            objectHasilBobot[0] = i;
            objectHasilBobot[1] = j1;
            objectHasilBobot[2] = j2;
            objectHasilBobot[3] = j3;
            objectHasilBobot[4] = j4;
            objectHasilBobot[5] = j5;
            objectHasilBobot[6] = j6;

            String sqlInsertFeedForwardaDua = "INSERT INTO `tb_12` VALUES\n"
                    + "(null,"
                    + "'" + j1 + "',"
                    + "'" + j2 + "',"
                    + "'" + j3 + "',"
                    + "'" + j4 + "',"
                    + "'" + j5 + "',"
                    + "'" + j6 + "')";
            System.out.println(sqlInsertFeedForwardaDua);
            Statement statementInsertFeedForwardaDua = (Statement) jdbc.getConnection().createStatement();
            statementInsertFeedForwardaDua.executeUpdate(sqlInsertFeedForwardaDua);

            tblBobotBaru.addRow(objectHasilBobot);
        }

        Object[] objectHasil = new Object[7];
        objectHasil[0] = hasilJ1;
        objectHasil[1] = hasilJ2;
        objectHasil[2] = hasilJ3;
        objectHasil[3] = hasilJ4;
        objectHasil[4] = hasilJ5;
        objectHasil[5] = hasilJ6;

        tblVector.addRow(objectHasil);
    }

    private void biasTableConfig() {
        tblBias = new DefaultTableModel();
        TblBias.setModel(tblBias);
        tblBias.addColumn("j1");
        tblBias.addColumn("j2");
        tblBias.addColumn("j3");
        tblBias.addColumn("j4");
        tblBias.addColumn("j5");
        tblBias.addColumn("j6");
    }

    private void biasShow() throws SQLException {
        tblBias.getDataVector().removeAllElements();
        tblBias.fireTableDataChanged();

        String sqlSelectBiasTable = "SELECT * FROM tb_nilai_bias_awal";
        Statement statementSelectBiasTable = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectBiasTable = statementSelectBiasTable.executeQuery(sqlSelectBiasTable);

        while (resultSetSelectBiasTable.next()) {
            Object[] objectSelectBiasTable = new Object[6];
            objectSelectBiasTable[0] = resultSetSelectBiasTable.getString("j1");
            objectSelectBiasTable[1] = resultSetSelectBiasTable.getString("j2");
            objectSelectBiasTable[2] = resultSetSelectBiasTable.getString("j3");
            objectSelectBiasTable[3] = resultSetSelectBiasTable.getString("j4");
            objectSelectBiasTable[4] = resultSetSelectBiasTable.getString("j5");
            objectSelectBiasTable[5] = resultSetSelectBiasTable.getString("j6");

            tblBias.addRow(objectSelectBiasTable);
        }
    }

    private void acakOutputConfig() {
        tblAcakOutput = new DefaultTableModel();
        TblAcakOutput.setModel(tblAcakOutput);
        tblAcakOutput.addColumn("wkj");
        tblAcakOutput.addColumn("k");
    }

    private void acakShow() throws SQLException {
        tblAcak.getDataVector().removeAllElements();
        tblAcak.fireTableDataChanged();

        String sqlSelectAcakTable = "SELECT * FROM tb_acak";
        Statement statementSelectAcakTable = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectAcakTable = statementSelectAcakTable.executeQuery(sqlSelectAcakTable);

        while (resultSetSelectAcakTable.next()) {
            Object[] objectSelectAcakTable = new Object[2];
            objectSelectAcakTable[0] = resultSetSelectAcakTable.getString("wkj");
            objectSelectAcakTable[1] = resultSetSelectAcakTable.getString("k");

            tblAcak.addRow(objectSelectAcakTable);
        }
    }

    private void outputShow() throws SQLException {
        tblAcakOutput.getDataVector().removeAllElements();
        tblAcakOutput.fireTableDataChanged();

        String sqlSelectAcakOutputTable = "SELECT * FROM tb_acak_output";
        Statement statementSelectAcakOutputTable = (Statement) jdbc.getConnection().createStatement();
        ResultSet resultSetSelectAcakOutputTable = statementSelectAcakOutputTable.executeQuery(sqlSelectAcakOutputTable);

        while (resultSetSelectAcakOutputTable.next()) {
            Object[] objectSelectAcakOutputTable = new Object[2];
            objectSelectAcakOutputTable[0] = resultSetSelectAcakOutputTable.getString("wk0");
            objectSelectAcakOutputTable[1] = resultSetSelectAcakOutputTable.getString("k");

            tblAcakOutput.addRow(objectSelectAcakOutputTable);
        }
    }

    private void truncateNilaiBiasAwal() {
        try {
            String sqlTruncateBiasAwal = "TRUNCATE tb_nilai_bias_awal";
            Statement statementTruncateBiasAwal = (Statement) jdbc.getConnection().createStatement();
            statementTruncateBiasAwal.executeUpdate(sqlTruncateBiasAwal);
        } catch (SQLException ex) {
            Logger.getLogger(Pelatihan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void acakTableConfig() {
        tblAcak = new DefaultTableModel();
        TblAcak.setModel(tblAcak);
        tblAcak.addColumn("wkj");
        tblAcak.addColumn("k");
    }

    private void termFrekuensi() throws SQLException {

        tblDokumen = new DefaultTableModel();
        TblDokumen.setModel(tblDokumen);
        tblDokumen.addColumn("Id");
        tblDokumen.addColumn("kalimat yang di eksekusi");
        tblDokumen.addColumn("kb+ (x1)");
        tblDokumen.addColumn("kk+ (x2)");
        tblDokumen.addColumn("ks+ (x3)");
        tblDokumen.addColumn("kb- (x4)");
        tblDokumen.addColumn("kk- (x5)");
        tblDokumen.addColumn("ks- (x6)");

        tblNormalisasi = new DefaultTableModel();
        TblNormalisasi.setModel(tblNormalisasi);
        tblNormalisasi.addColumn("Id");
        tblNormalisasi.addColumn("kalimat yang di eksekusi");
        tblNormalisasi.addColumn("kb+ (x1)");
        tblNormalisasi.addColumn("kk+ (x2)");
        tblNormalisasi.addColumn("ks+ (x3)");
        tblNormalisasi.addColumn("kb- (x4)");
        tblNormalisasi.addColumn("kk- (x5)");
        tblNormalisasi.addColumn("ks- (x6)");

        //Jumlah Kata
        String sqlSelectAllJumlahKata = "SELECT * FROM tb_jumlah_kata, tb_filtering WHERE tb_jumlah_kata.id = tb_filtering.id_filtering ";
        Statement stJumlahKata = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsJumlahKata = stJumlahKata.executeQuery(sqlSelectAllJumlahKata);
        while (rsJumlahKata.next()) {
            Object[] oJumlahKata = new Object[8];
            oJumlahKata[0] = rsJumlahKata.getString("id");
            oJumlahKata[1] = rsJumlahKata.getString("deskripsi_filtering");
            oJumlahKata[2] = rsJumlahKata.getString("kbplus");
            oJumlahKata[3] = rsJumlahKata.getString("kkplus");
            oJumlahKata[4] = rsJumlahKata.getString("ksplus");
            oJumlahKata[5] = rsJumlahKata.getString("kbmin");
            oJumlahKata[6] = rsJumlahKata.getString("kkmin");
            oJumlahKata[7] = rsJumlahKata.getString("ksmin");
            tblDokumen.addRow(oJumlahKata);

        }

        Statement st = (Statement) jdbc.getConnection().createStatement();
        String sqlTruncateNormalisasi = "TRUNCATE tb_normalisasi";
        st.executeUpdate(sqlTruncateNormalisasi);

        //Max jumlah kata
        String sqlSelectCountJumlah = "SELECT max(id_filtering) as countKata FROM tb_tf_jumlah_kata";
        Statement stCountJumlah = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsCountJumlah = stCountJumlah.executeQuery(sqlSelectCountJumlah);
        while (rsCountJumlah.next()) {
            for (int i = 1; i <= Integer.parseInt(rsCountJumlah.getString("countKata")); i++) {

                String sqlInsertNormalisasi = "INSERT INTO tb_normalisasi (id, kbplus, kkplus, ksplus, kbmin, kkmin, ksmin) VALUES (null, 0, 0, 0, 0, 0, 0)";
                st.executeUpdate(sqlInsertNormalisasi);

                //Max jumlah kata
                String sqlSelectCountKBPlusMax = "SELECT max(kbplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKBPlusMax);
                Statement stCountKBPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKBPlusMax = stCountKBPlusMax.executeQuery(sqlSelectCountKBPlusMax);
                while (rsCountKBPlusMax.next()) {
                    String sqlSelectCountKBPlusMin = "SELECT min(kbplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKBPlusMin);
                    Statement stCountKBPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKBPlusMin = stCountKBPlusMin.executeQuery(sqlSelectCountKBPlusMin);
                    while (rsCountKBPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKBPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKBPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKBPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
//                            System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKBMinMax = "SELECT max(kbmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKBMinMax);
                Statement stCountKBMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKBMinMax = stCountKBMinMax.executeQuery(sqlSelectCountKBMinMax);
                while (rsCountKBMinMax.next()) {
                    String sqlSelectCountKBMinMin = "SELECT min(kbmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKBMinMin);
                    Statement stCountKBMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKBMinMin = stCountKBMinMin.executeQuery(sqlSelectCountKBMinMin);
                    while (rsCountKBMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKBMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKBMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKBMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

//                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kbplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else
                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("benda"))) {
                                String sqlUpdateKBMinNormalisasi = "UPDATE tb_normalisasi SET kbmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
//                            System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBMinNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
//                            } else if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
//                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
////                            System.out.println(sqlUpdateKBPlusNormalisasi);
//                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKSPlusMax = "SELECT max(ksplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKSPlusMax);
                Statement stCountKSPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKSPlusMax = stCountKSPlusMax.executeQuery(sqlSelectCountKSPlusMax);
                while (rsCountKSPlusMax.next()) {
                    String sqlSelectCountKSPlusMin = "SELECT min(kbplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKSPlusMin);
                    Statement stCountKSPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKSPlusMin = stCountKSPlusMin.executeQuery(sqlSelectCountKSPlusMin);
                    while (rsCountKSPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKSPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKSPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKSPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
                                String sqlUpdateKBPlusNormalisasi = "UPDATE tb_normalisasi SET ksplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKBPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKBPlusNormalisasi);

                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKSMinMax = "SELECT max(ksmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKSMinMax);
                Statement stCountKSMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKSMinMax = stCountKSMinMax.executeQuery(sqlSelectCountKSMinMax);
                while (rsCountKSMinMax.next()) {
                    String sqlSelectCountKSMinMin = "SELECT min(ksmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKSMinMin);
                    Statement stCountKSMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKSMinMin = stCountKSMinMin.executeQuery(sqlSelectCountKSMinMin);
                    while (rsCountKSMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKSMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKSMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKSMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("sifat"))) {
                                String sqlUpdateKSPlusNormalisasi = "UPDATE tb_normalisasi SET ksmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKSPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKSPlusNormalisasi);

                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKKPlusMax = "SELECT max(kkplus) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKKPlusMax);
                Statement stCountKKPlusMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKKPlusMax = stCountKKPlusMax.executeQuery(sqlSelectCountKKPlusMax);
                while (rsCountKKPlusMax.next()) {
                    String sqlSelectCountKKPlusMin = "SELECT min(kkplus) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKKPlusMin);
                    Statement stCountKKPlusMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKKPlusMin = stCountKKPlusMin.executeQuery(sqlSelectCountKKPlusMin);
                    while (rsCountKKPlusMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKKPlusMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKKPlusMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKKPlusMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("1")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
                                String sqlUpdateKKPlusNormalisasi = "UPDATE tb_normalisasi SET kkplus = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKKPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKKPlusNormalisasi);
                            }
                        }
                    }
                }

                //Max jumlah kata
                String sqlSelectCountKKMinMax = "SELECT max(kkmin) as maxJumlahKata FROM tb_jumlah_kata";
                System.out.println(sqlSelectCountKKMinMax);
                Statement stCountKKMinMax = (Statement) jdbc.getConnection().createStatement();
                ResultSet rsCountKKMinMax = stCountKKMinMax.executeQuery(sqlSelectCountKKMinMax);
                while (rsCountKKMinMax.next()) {
                    String sqlSelectCountKKMinMin = "SELECT min(kkmin) as minJumlahKata FROM tb_jumlah_kata";
                    System.out.println(sqlSelectCountKKMinMin);
                    Statement stCountKKMinMin = (Statement) jdbc.getConnection().createStatement();
                    ResultSet rsCountKKMinMin = stCountKKMinMin.executeQuery(sqlSelectCountKKMinMin);
                    while (rsCountKKMinMin.next()) {
                        String sqlSelectKata = "SELECT * FROM tb_tf_jumlah_kata, tb_filtering WHERE tb_tf_jumlah_kata.id_filtering = tb_filtering.id_filtering AND tb_tf_jumlah_kata.id_filtering = " + i + "";
                        Statement stCountKata = (Statement) jdbc.getConnection().createStatement();
                        ResultSet rsCountKata = stCountKata.executeQuery(sqlSelectKata);

                        while (rsCountKata.next()) {
//                        System.out.print(rsCountKata.getString("id_filtering"));
//                        System.out.print(" " + rsCountKata.getString("jumlah_kata"));
//                        System.out.print(" " + rsCountKata.getString("tipe_kata"));
//                        System.out.print(" " + rsCountKata.getString("nilai_kata"));
//                        System.out.println(" " + rsCountKBPlusMax.getString("maxJumlahKata"));

                            Object[] oNormalisasi = new Object[7];
                            oNormalisasi[0] = rsCountKata.getString("id_filtering");
                            oNormalisasi[1] = rsCountKata.getString("deskripsi_filtering");
                            oNormalisasi[2] = rsCountKata.getString("tipe_kata");
                            if (rsCountKata.getString("nilai_kata").equals("1")) {
                                oNormalisasi[3] = "Positif";
                            } else {
                                oNormalisasi[3] = "Negatif";
                            }
                            oNormalisasi[4] = rsCountKata.getString("jumlah_kata");
                            oNormalisasi[5] = rsCountKKMinMax.getString("maxJumlahKata");
                            float x = Float.parseFloat(rsCountKata.getString("jumlah_kata"));
                            float min = Float.parseFloat(rsCountKKMinMin.getString("minJumlahKata"));
                            float max = Float.parseFloat(rsCountKKMinMax.getString("maxJumlahKata"));
                            oNormalisasi[6] = ((0.8 * (x - min)) / (max - min)) + 0.1;
                            //tblNormalisasi.addRow(oNormalisasi);

                            if ((rsCountKata.getString("nilai_kata").equals("0")) && (rsCountKata.getString("tipe_kata").equals("kerja"))) {
                                String sqlUpdateKKPlusNormalisasi = "UPDATE tb_normalisasi SET kkmin = '" + oNormalisasi[6] + "' WHERE id = '" + oNormalisasi[0] + "'";
                                System.out.println(sqlUpdateKKPlusNormalisasi);
                                st.executeUpdate(sqlUpdateKKPlusNormalisasi);
                            }
                        }
                    }
                }
            }
        }

        //normalisasi
        String sqlSelectAllNormalisasiHasil = "SELECT * FROM tb_normalisasi, tb_filtering WHERE tb_normalisasi.id = tb_filtering.id_filtering ";
        Statement stNormalisasiHasil = (Statement) jdbc.getConnection().createStatement();
        ResultSet rsNormalisasiHasil = stNormalisasiHasil.executeQuery(sqlSelectAllNormalisasiHasil);

        while (rsNormalisasiHasil.next()) {
            Object[] oNormalisasiHasil = new Object[8];
            oNormalisasiHasil[0] = rsNormalisasiHasil.getString("id");
            oNormalisasiHasil[1] = rsNormalisasiHasil.getString("deskripsi_filtering");
            oNormalisasiHasil[2] = rsNormalisasiHasil.getString("kbplus");
            oNormalisasiHasil[3] = rsNormalisasiHasil.getString("kkplus");
            oNormalisasiHasil[4] = rsNormalisasiHasil.getString("ksplus");
            oNormalisasiHasil[5] = rsNormalisasiHasil.getString("kbmin");
            oNormalisasiHasil[6] = rsNormalisasiHasil.getString("kkmin");
            oNormalisasiHasil[7] = rsNormalisasiHasil.getString("ksmin");
            tblNormalisasi.addRow(oNormalisasiHasil);
        }
    }

}
